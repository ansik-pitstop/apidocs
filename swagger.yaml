swagger: "2.0"
info:
  version: "1.0.0"
  title: Pitstop API Server
# during dev, should point to your local machine
host: localhost:10010
basePath: /
schemes:
  # tip: remove http to make production-grade
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  "/health-check":
    x-swagger-router-controller: utilities
    get:
      description: basic health check
      operationId: healthCheck
      tags:
        - Utility
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  # v1 endpoints
  "/v1/trips/match":
    x-swagger-router-controller: tripmatching
    get:
      description: get trip data of group
      operationId: v1.getMatchedTrips
      tags:
        - similar trips
      parameters:
        - name: bucketHash
          type: string
          in: query
          required: true
          description: bucketHash of group
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trips/groups":
    x-swagger-router-controller: tripmatching
    get:
      description: get groups of similar trips
      operationId: v1.getTripGroups
      tags:
        - similar trips
      parameters:
        - name: vin
          type: string
          in: query
          required: true
          description: vin
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/labs/ftconfig":
    x-swagger-router-controller: labs
    get:
      description: get current ftconfig
      operationId: v1.getFtConfig
      tags:
        - labs
      parameters:
        - name: shopID
          type: integer
          in: query
          required: true
          description: shopID
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: save new tfconfig
      operationId: v1.postFtConfig
      tags:
        - labs
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              shopID:
                type: integer
              threshold:
                type: string
                description: low, med, high
            required:
              - shopID
              - threshold
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/labs/symptom":
    x-swagger-router-controller: labs
    get:
      description: get parts for symptom
      operationId: v1.getPartsSymptom
      tags:
        - labs
      parameters:
        - name: search
          type: string
          in: query
          required: true
          description: search words
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/labs/watcher":
    x-swagger-router-controller: labs
    get:
      description: system watcher
      operationId: v1.watcher
      tags:
        - labs
      parameters:
        - name: shopID
          type: string
          in: query
          required: false
          description: code for shop ID
        - name: dateFrom
          type: string
          in: query
          required: true
          description: start date
        - name: dateTo
          type: string
          in: query
          required: true
          description: end date
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/labs/repair":
    x-swagger-router-controller: labs
    get:
      description: get repair and pricing
      operationId: v1.getRepairPricing
      tags:
        - labs
      parameters:
        - name: make
          type: string
          in: query
          required: true
          description: make of the car
        - name: model
          type: string
          in: query
          required: true
          description: model of the car
        - name: year
          type: integer
          in: query
          required: true
          description: built year of the car
        - name: category
          type: string
          in: query
          required: true
          description: selected category
        - name: repair
          type: string
          in: query
          required: true
          description: input of the repair
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/labs/repair/feedback":
    x-swagger-router-controller: labs
    get:
      description: post repair feedback
      operationId: v1.postRepairFeedback
      tags:
        - labs
      parameters:
        - name: make
          type: string
          in: query
          required: true
          description: make of the car
        - name: model
          type: string
          in: query
          required: true
          description: model of the car
        - name: year
          type: integer
          in: query
          required: true
          description: built year of the car
        - name: category
          type: string
          in: query
          required: true
          description: selected category
        - name: repair
          type: string
          in: query
          required: true
          description: input of the repair
        - name: result
          type: string
          in: query
          required: false
          description: search results
        - name: feedback
          type: string
          in: query
          required: true
          description: feedback thumps up or down
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/integrations":
    x-swagger-router-controller: integration
    get:
      description: get integration status of a shop
      operationId: v1.getIntegrationStatusByShop
      tags:
        - Integration
        - Shop
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  requestId:
                    type: string
                    description: Request ID
                  total:
                    type: number
                    description: Total Results returned for showing total page numbers
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                        description: limit
                      offset:
                        type: number
                        description: offset
              data:
                $ref: "#/definitions/IntegrationRecord"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/subfleetEcosystem":
    x-swagger-router-controller: integration
    get:
      description: get other shops in currentShop ecosystem
      operationId: v1.getShopSubfleetEcosystem
      tags:
        - Shop
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  data:
                    description: list of shops
                    type: array
                    items:
                      type: object
              meta:
                $ref: "#/definitions/responseMeta"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shop/{shopId}/integration/account":
    x-swagger-router-controller: integration
    get:
      description: get integration account by shop
      operationId: v1.getIntegrationAccountByShop
      tags:
        - Integration
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: object
                description: integration accounts
                properties:
                  type:
                    type: string
                    description: integration type "geotab || samsara"
                  integration_account_id:
                    type: string
                    description: integration account id
                  alias:
                    type: string
                    description: integration account alias
                  id_shop:
                    type: number
                    description: shop id
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shop/{shopId}/integration/has-integration":
    x-swagger-router-controller: integration
    get:
      description: check if the shop has integration
      operationId: v1.checkIfShopHasIntegration
      tags:
        - Integration
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: object
                description: boolean with integration indicator
                properties:
                  data:
                    type: boolean
                    description: true when integration exists or false when not
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/integrations/geotab":
    x-swagger-router-controller: integration
    post:
      description: add geotab integration
      operationId: v1.addGeotabIntegration
      tags:
        - Integration
        - Shop
      parameters:
        - name: shopId
          in: path
          type: number
          required: true
        - name: payload
          in: body
          required: true
          schema:
            properties:
              username:
                type: string
              password:
                type: string
              database:
                type: string
              url:
                type: string
                description: "starting with http:// or https://"
              alias:
                type: string
              defaultMigrationStartTimestamp:
                type: string
                description: ISO 8601 timestamp
            required:
              - username
              - password
              - database
              - url
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  requestId:
                    type: string
                    description: Request ID
                  total:
                    type: number
                    description: Total Results returned for showing total page numbers
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                        description: limit
                      offset:
                        type: number
                        description: offset
              data:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/integrations/metrics":
    x-swagger-router-controller: integration
    post:
      description: create a integration metrics record
      operationId: v1.createIntegrationMetrics
      tags:
        - Integration
      parameters:
        - name: payload
          in: body
          schema:
            properties:
              meta:
                type: object
              data:
                type: object
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: object
                description: geotab sync status
  "/v1/integrations/metrics/latest":
    x-swagger-router-controller: integration
    get:
      description: get the latest integration metrics record
      operationId: v1.getLatestIntegrationMetrics
      tags:
        - Integration
      parameters:
        - name: carId
          in: query
          type: number
          required: false
        - name: integrationId
          in: query
          type: string
          required: false
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: object
  "/v1/integrations/geotab/{shopId}":
    x-swagger-router-controller: integration
    get:
      description: get geotab sync status by shop
      operationId: v1.getGeotabSyncStatus
      tags:
        - Geotab Sync status
      parameters:
        - name: shopId
          in: path
          type: string
          required: true
        - name: offset
          in: query
          type: number
          required: true
        - name: limit
          in: query
          type: number
          required: true
        - name: carId
          in: query
          type: number
          required: false
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: object
                description: geotab sync status
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  /v1/integrations/samsara/locations:
    x-swagger-router-controller: dvir
    post:
      description: POST Asset Location
      operationId: v1.createSamsaraLocation
      tags:
        - Integration
        - Location
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /v1/integrations/samsara/dvir:
    x-swagger-router-controller: dvir
    post:
      description: create a Samsara DVIR record
      operationId: v1.createSamsaraDvir
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              dvirId:
                type: string
              vin:
                type: string
              payload:
                type: object
              vehicle_samsara_id:
                type: string
            required:
              - dvirId
              - vin
              - payload
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  /v1/integrations/samsara/dvirUpdate:
    x-swagger-router-controller: dvir
    post:
      description: create a Samsara DVIR update record
      operationId: v1.createSamsaraDvirUpdate
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              dvirId:
                type: string
              recordTimestamp:
                type: string
              payload:
                type: object
            required:
              - dvirId
              - recordTimestamp
              - payload
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"

  /v1/integrations/samsara/dvirDefectUpdate:
    x-swagger-router-controller: dvir
    post:
      description: create a Samsara DVIR update record
      operationId: v1.createSamsaraDvirDefectUpdate
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              dvirId:
                type: string
              defectId:
                type: string
              recordTimestamp:
                type: string
              payload:
                type: object
            required:
              - dvirId
              - defectId
              - recordTimestamp
              - payload
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  /v1/integrations/samsara/dvir/resolve:
    x-swagger-router-controller: dvir
    post:
      description: resolve a Samsara DVIR record
      operationId: v1.resolveSamsaraDvir
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              recordId:
                type: string
                description: pitstop uuid of dvir record
              shopId:
                type: number
                description: pitstop shop id
              samsaraUserEmail:
                type: string
              mechanicNotes:
                type: string
            required:
              - recordId
              - shopId
              - samsaraUserEmail
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  /v1/integrations/samsara/dvir/resolve-defect:
    x-swagger-router-controller: dvir
    post:
      description: resolve a Samsara DVIR defect record
      operationId: v1.resolveSamsaraDvirDefect
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              dvirId:
                type: number
                description: samsara id of dvir
              defectId:
                type: string
                description: samsara id of dvir defect
              mechanicNotes:
                type: string
              isResolved:
                type: boolean
              resolvedBySamsaraUserId:
                type: string
              shopId:
                type: number
                description: pitstop shop id
            required:
              - dvirId
              - defectId
              - resolvedBySamsaraUserId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  /v1/integrations/samsara/dvir/save-mechanic-notes:
    x-swagger-router-controller: dvir
    post:
      description: save mechanic notes in a defect
      operationId: v1.saveMechanicNotes
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              dvirId:
                type: number
                description: samsara id of dvir
              defectId:
                type: string
                description: samsara id of dvir defect
              mechanicNotes:
                type: string
              shopId:
                type: number
                description: pitstop shop id
            required:
              - dvirId
              - defectId
              - mechanicNotes
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  /v1/integrations/samsara/list-shop-users:
    x-swagger-router-controller: dvir
    post:
      description: Get the list of Shop users from Samsara
      operationId: v1.listSamsaraUsersFromShop
      tags:
        - Integration
        - DVIR
      parameters:
        - name: body
          in: body
          required: true
          schema:
            properties:
              shopId:
                type: number
                description: pitstop shop id
            required:
              - shopId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
  "/v1/shops/{shopId}/integrations/smartcar":
    x-swagger-router-controller: integration
    post:
      description: add geotab integration
      operationId: v1.addSmartcarIntegration
      tags:
        - Integration
        - Shop
      parameters:
        - name: shopId
          in: path
          type: number
          required: true
        - name: payload
          in: body
          required: true
          schema:
            properties:
              alias:
                type: string
              authorizationCode:
                type: string
            required:
              - authorizationCode
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  requestId:
                    type: string
                    description: Request ID
                  total:
                    type: number
                    description: Total Results returned for showing total page numbers
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                        description: limit
                      offset:
                        type: number
                        description: offset
              data:
                type: object
                properties:
                  message:
                    type: string
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/issues/summary":
    x-swagger-router-controller: issue
    get:
      description: get all issues' summary data for a shopId
      operationId: v1.getIssuesSummaryByShop
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: limit
          type: number
          in: query
          required: false
          description: number of issues to be returned in a request
        - name: offset
          type: number
          in: query
          required: false
          description: offset value
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  requestId:
                    type: string
                    description: Request ID
                  total:
                    type: number
                    description: Total Results returned for showing total page numbers
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                        description: limit
                      offset:
                        type: number
                        description: offset
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      description: Issue ID
                    status:
                      type: string
                      description: status of the issues (new/upcoming/done)
                    source:
                      type: string
                      description: source of the issues (dtc, recall, routine, algorithm, customer, archive)
                    suggestedAction:
                      type: string
                      description: Our suggested action for a user to take basedon this issue
                    engineDeratePossible:
                      type: boolean
                      description: Whether the issue can cause the engine to lose power
                    finishRoute:
                      type: boolean
                      description: Whether the issue is severe enough that the driver should not finish their current route
                    adjPriority:
                      type: number
                      description: Issue priority adjusted according to Data Science criteria
                    priority:
                      type: number
                      description: Priority of the issue
                    name:
                      type: string
                      description: Name of the issue
                    car:
                      type: object
                      properties:
                        id:
                          type: number
                          description: Car Id
                        vin:
                          type: string
                          description: VIN of the car
                        name:
                          type: string
                          description: carName
                    dueData:
                      type: string
                      description: Due Date for the service issue
                    dueMileage:
                      type: number
                      description: Due mileage for the service issue
                    reportMileage:
                      type: number
                      description: Reported Mileage
                    cost:
                      type: number
                      description: Estimated cost of the service
                    componentCategory:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the component category
                          priority:
                            type: number
                            description: priority of the component category
                    genericCategory:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the generic category
                          priority:
                            type: number
                            description: priority of the generic category
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/issues/pms":
    x-swagger-router-controller: issue
    get:
      description: get all pms data and assets details for a shopId
      operationId: v1.getPMsAndAssetsByShop
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: startDueDate
          type: string
          in: query
          required: true
          description: The startDueDate to search for PMs
        - name: endDueDate
          type: string
          in: query
          required: true
          description: The endDueDate to search for PMs
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  requestId:
                    type: string
                    description: Request ID
                  total:
                    type: number
                    description: Total Results returned for showing total page numbers
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                        description: limit
                      offset:
                        type: number
                        description: offset
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: number
                      description: Issue ID
                    status:
                      type: string
                      description: status of the issues (new/upcoming/done)
                    source:
                      type: string
                      description: source of the issues (dtc, recall, routine, algorithm, customer, archive)
                    suggestedAction:
                      type: string
                      description: Our suggested action for a user to take basedon this issue
                    engineDeratePossible:
                      type: boolean
                      description: Whether the issue can cause the engine to lose power
                    finishRoute:
                      type: boolean
                      description: Whether the issue is severe enough that the driver should not finish their current route
                    adjPriority:
                      type: number
                      description: Issue priority adjusted according to Data Science criteria
                    priority:
                      type: number
                      description: Priority of the issue
                    name:
                      type: string
                      description: Name of the issue
                    car:
                      type: object
                      properties:
                        id:
                          type: number
                          description: Car Id
                        vin:
                          type: string
                          description: VIN of the car
                        name:
                          type: string
                          description: carName
                    dueData:
                      type: string
                      description: Due Date for the service issue
                    dueMileage:
                      type: number
                      description: Due mileage for the service issue
                    reportMileage:
                      type: number
                      description: Reported Mileage
                    cost:
                      type: number
                      description: Estimated cost of the service
                    componentCategory:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the component category
                          priority:
                            type: number
                            description: priority of the component category
                    genericCategory:
                      type: array
                      items:
                        type: object
                        properties:
                          name:
                            type: string
                            description: name of the generic category
                          priority:
                            type: number
                            description: priority of the generic category
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    patch:
      description: update a pm service due_date
      operationId: v1.updatePmService
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: serviceId
          type: number
          in: query
          required: true
          description: The serviceId
        - name: serviceCustomizedId
          type: number
          in: query
          required: true
          description: The serviceCustomizedId
        - name: service
          in: body
          required: true
          description: Service's Updated Properties
          schema:
            properties:
              due_date:
                type: string
                description: Service Customized Due Date
              mileage:
                type: number
                description: Mileage to update maintenance_assign_car
              engineHours:
                type: number
                description: Engine Hours to update maintenance_assign_car
              carId:
                type: number
                description: Car ID to update maintenance_assign_car
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  serviceCustomizedId:
                    type: number
                    description: The serviceCustomizedId
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/trips/latest":
    x-swagger-router-controller: trip
    get:
      description: summary of all latest test trips
      operationId: v1.getLatestTestTrips
      tags:
        - Trip
      parameters:
        - name: shopId
          in: path
          required: true
          description: shop id to get the lates test trips
          type: number
        - name: limit
          in: query
          required: false
          description: limit number of the latest test trips
          type: number
        - name: offset
          in: query
          required: false
          description: pagination
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  data:
                    description: list of objects with car and trip details
                    type: array
                    items:
                      type: object
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/trips/date-grouped":
    x-swagger-router-controller: trip
    get:
      description: trips in a range, grouped by date
      operationId: v1.getTripsInRange
      tags:
        - Trip
      parameters:
        - name: shopId
          in: path
          required: true
          description: shop id to get the lates test trips
          type: number
        - name: from
          in: query
          required: false
          description: initial datetime to search trips
          type: number
        - name: to
          in: query
          required: false
          description: final datetime to search trips
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  data:
                    description: list of objects with date and trips count
                    type: array
                    items:
                      type: object
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/issues":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a shopId
      operationId: v1.getIssuesDetailsByShop
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: sort
          type: string
          in: query
          required: false
          description: Sorting based on "status,source,priority,completionDate,-remainingMileage, reportDate, doneDate, carName, dueDate"
        - name: status
          type: string
          in: query
          required: false
          description: Filter based on status "new,upcoming,done,pending"
        - name: priority
          type: string
          in: query
          required: false
          description: Filter based on priority "critical/major/minor"
        - name: source
          type: string
          in: query
          required: false
          description: Filter based on source "dtc/recall/routine/algorithm/customer/archive"
        - name: limit
          type: number
          in: query
          required: false
          description: number of issues to be returned in a request
        - name: offset
          type: number
          in: query
          required: false
          description: offset value
        - name: includeHistory
          type: boolean
          in: query
          required: false
          description: Include history of dtc's with dates
        - name: searchOn
          type: array
          in: query
          required: false
          description: issue property to search on
          items:
            type: string
        - name: searchValue
          type: string
          in: query
          required: false
          description: value to search for
        - name: startDate
          type: string
          in: query
          required: false
          description: start date of issue trigger
          items:
            type: string
        - name: endDate
          type: string
          in: query
          required: false
          description: end date of issue trigger
        - name: dontCheckPms
          type: boolean
          in: query
          required: false
          description: don't check pms
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/issues/download":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a shopId
      operationId: v1.downloadCsvIssuesByShop
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: status
          type: string
          in: query
          required: false
          description: Filter based on status "new,upcoming,done,pending"
        - name: priority
          type: string
          in: query
          required: false
          description: Filter based on priority "critical/major/minor"
        - name: source
          type: string
          in: query
          required: false
          description: Filter based on source "dtc/recall/routine/algorithm/customer/archive"
        - name: searchValue
          type: string
          in: query
          required: false
          description: value to search for
        - name: startDate
          type: string
          in: query
          required: false
          description: start date of issue trigger
          items:
            type: string
        - name: endDate
          type: string
          in: query
          required: false
          description: end date of issue trigger
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/users/{userId}/invitation":
    x-swagger-router-controller: shop
    post:
      description: Send Email invite to shop customers/drivers for logging in
      operationId: sendInvitationEmail
      tags:
        - Service
      parameters:
        - name: shopId
          type: integer
          in: path
          required: true
          description: ID for a shop
        - name: userId
          type: integer
          in: path
          required: true
          description: ID for a user
        - name: inviter
          in: body
          required: true
          schema:
            properties:
              inviterId:
                type: integer
            required:
              - inviterId
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
  "/v1/shops/{shopId}/resend-all-invitation":
    x-swagger-router-controller: shop
    post:
      description: Resend email invite to shop customers/drivers
      operationId: resendAllInvitationEmails
      tags:
        - Shop
      parameters:
        - name: shopId
          type: integer
          in: path
          required: true
          description: ID for a shop
        - name: inviter
          in: body
          required: true
          schema:
            properties:
              inviterId:
                type: integer
            required:
              - inviterId
        - name: role
          type: string
          in: query
          required: true
          description: specifify a user role which will resend invitation emails
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
  "/v1/shops/shop-basic-data":
    x-swagger-router-controller: shop
    get:
      description: get shops basic data
      operationId: shopsBasicData
      tags:
        - Shop
      parameters:
        - name: shopIds
          type: string
          in: query
          required: true
          description: Shop Ids separated by comma
      responses:
        "200":
          description: Success
          schema:
            properties:
              data:
                type: array
                items:
                  type: object

        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/{carId}/issues":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a car
      operationId: v1.getIssuesDetailsByCar
      tags:
        - Service
      parameters:
        - name: carId
          type: number
          in: path
          required: true
          description: ID for a car
        - name: shopId
          type: number
          in: query
          required: false
          description: ID for a shop
        - name: sort
          type: string
          in: query
          required: false
          description: Sorting based on "status,source,priority,completionDate,-remainingMileage"
        - name: status
          type: string
          in: query
          required: false
          description: Filter based on status "new,upcoming,done,pending"
        - name: priority
          type: string
          in: query
          required: false
          description: Filter based on priority "critical/major/minor"
        - name: source
          type: string
          in: query
          required: false
          description: Filter based on source "dtc/recall/routine/algorithm/customer/archive"
        - name: limit
          type: number
          in: query
          required: false
          description: number of issues to be returned in a request
        - name: offset
          type: number
          in: query
          required: false
          description: offset value
        - name: includeHistory
          type: boolean
          in: query
          required: false
          description: Include history of dtc's with dates
        - name: searchOn
          type: array
          in: query
          required: false
          description: issue property to search on
          items:
            type: string
        - name: searchValue
          type: string
          in: query
          required: false
          description: value to search for
        - name: pm_status
          type: string
          in: query
          required: false
          description: filter by PM status i.e upcoming, due soon etc.
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/{carId}/pms":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a car
      operationId: v1.getPMsDetailsByCar
      tags:
        - Service
      parameters:
        - name: carId
          type: number
          in: path
          required: true
          description: ID for a car
        - name: shopId
          type: number
          in: query
          required: false
          description: ID for a shop
        - name: sort
          type: string
          in: query
          required: false
          description: Sorting based on "status,source,priority,completionDate,-remainingMileage"
        - name: status
          type: string
          in: query
          required: false
          description: Filter based on status "new,upcoming,done,pending"
        - name: priority
          type: string
          in: query
          required: false
          description: Filter based on priority "critical/major/minor"
        - name: source
          type: string
          in: query
          required: false
          description: Filter based on source "dtc/recall/routine/algorithm/customer/archive"
        - name: limit
          type: number
          in: query
          required: false
          description: number of issues to be returned in a request
        - name: offset
          type: number
          in: query
          required: false
          description: offset value
        - name: includeHistory
          type: boolean
          in: query
          required: false
          description: Include history of dtc's with dates
        - name: searchOn
          type: array
          in: query
          required: false
          description: issue property to search on
          items:
            type: string
        - name: search
          type: string
          in: query
          required: false
          description: value to search for
        - name: pm_status
          type: string
          in: query
          required: false
          description: filter by PM status i.e upcoming, due soon etc.
        - name: safetyInspection
          type: boolean
          in: query
          required: false
          description: To retreive data by safety flag
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/service-interval/{shopId}":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a car
      operationId: v1.getPMsDetailsByCar
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: ID for a shop
        - name: sort
          type: string
          in: query
          required: false
          description: Sorting based on "status,source,priority,completionDate,-remainingMileage"
        - name: status
          type: string
          in: query
          required: false
          description: Filter based on status "new,upcoming,done,pending"
        - name: priority
          type: string
          in: query
          required: false
          description: Filter based on priority "critical/major/minor"
        - name: source
          type: string
          in: query
          required: false
          description: Filter based on source "dtc/recall/routine/algorithm/customer/archive"
        - name: limit
          type: number
          in: query
          required: false
          description: number of issues to be returned in a request
        - name: offset
          type: number
          in: query
          required: false
          description: offset value
        - name: includeHistory
          type: boolean
          in: query
          required: false
          description: Include history of dtc's with dates
        - name: searchOn
          type: array
          in: query
          required: false
          description: issue property to search on
          items:
            type: string
        - name: search
          type: string
          in: query
          required: false
          description: value to search for
        - name: pm_status
          type: string
          in: query
          required: false
          description: filter by PM status i.e upcoming, due soon etc.
        - name: safetyInspection
          type: boolean
          in: query
          required: false
          description: To retreive data by safety flag
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/pms/{hash}":
    x-swagger-router-controller: issue
    delete:
      description: get all issues' details data for a car
      operationId: v1.removeSelectedServices
      tags:
        - Service
      parameters:
        - name: hash
          type: string
          in: path
          required: true
          description: item hash of active pm
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    patch:
      description: update a pm
      operationId: v1.updateService
      tags:
        - Service
      parameters:
        - name: hash
          type: string
          in: path
          required: true
          description: item hash of active pm
        - name: data
          in: body
          required: true
          description: New PM properties
          schema:
            properties:
              action:
                type: string
              description:
                type: string
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/makes/{shopId}":
    x-swagger-router-controller: car
    get:
      description: get all makes of cars from a shop
      operationId: v1.getShopCarsMakes
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: shop id
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/models/{shopId}":
    x-swagger-router-controller: car
    get:
      description: get all models of cars from a shop
      operationId: v1.getShopCarsModels
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: shop id
        - name: make
          type: string
          in: query
          required: false
          description: make of the car
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
  "/v1/cars/years/{shopId}":
    x-swagger-router-controller: car
    get:
      description: get all years of cars from a shop
      operationId: v1.getShopCarsYears
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: shop id
        - name: model
          type: string
          in: query
          required: false
          description: model of the car
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  total:
                    type: number
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: number
                      offset:
                        type: number
              data:
                type: array
                items:
                  $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
  "/v1/issues/algo":
    x-swagger-router-controller: algoIssue
    post:
      description: Create new algo issue assiciated with car
      operationId: v1.createAlgorithmIssue
      tags:
        - Issue
      parameters:
        - name: body
          in: body
          required: true
          schema:
            required: [item, action, description, failure, algorithm, vin, report, issue_explanation, status, priority]
            properties:
              item:
                type: string
              action:
                type: string
              description:
                type: string
              failure:
                type: string
              algorithm:
                type: string
              vin:
                type: string
              report:
                type: string
              issue_explanation:
                type: string
              status:
                type: string
              priority:
                type: integer
              id_vmrs:
                type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/issues/{issueId}":
    x-swagger-router-controller: issue
    get:
      description: get all issues' details data for a car
      operationId: v1.getIssueDetailsById
      tags:
        - Service
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
        - name: shopId
          type: number
          in: query
          required: false
          description: ID for a shop
        - name: includeHistory
          type: boolean
          in: query
          required: false
          description: Include history of dtc's with dates
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    put:
      description: Edit existing issue properties
      operationId: v1.updateIssueById
      tags:
        - Service
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
        - name: shopId
          type: number
          in: query
          required: false
          description: Shop ID for whoever is editing the issue
        - name: triggerDriverNotification
          type: boolean
          in: query
          required: false
          description: If a notification should be sent to the driver/customer
        - name: sendPriorityAlert
          type: boolean
          in: query
          required: false
          description: If a priority alert email should be sent
        - name: automatedUpdate
          type: boolean
          in: query
          required: false
          description: If the car service update should be marked as an automated update
        - name: issue
          in: body
          required: true
          description: Issue's Updated Properties
          schema:
            properties:
              status:
                type: string
                description: Issue Status
              priority:
                type: number
                description: Issue Priority
              description:
                type: string
                description: Issue description
              item:
                type: string
                description: Parts Affected by Issue
              source:
                type: string
                description: issue reference table
              sourceId:
                type: number
                description: id of issue in reference table
              feedback:
                type: string
                description: issue feedback
              notes:
                type: string
                description: Notes by fleet manager to be showed later
              action:
                type: string
                description: Action required to resolve the issue
              causes:
                type: string
                description: Cause for the issue
              symptoms:
                type: string
                description: Symptoms of the issue
              doneAt:
                type: string
                description: Issue completion date.
              idServiceAlgoHistory:
                type: number
                description: Issue completion date.
              vmrsKey:
                type: number
                description: vmrs key
              carVin:
                type: string
                description: car vin
              applyToSimilarIssues:
                type: boolean
                description: save changes to shop_issue_settings table and have them apply to similar issues
              applyToMMYConfig:
                type: string
                description: save changes to shop_issue_settings table and have them apply to issues with the applicable make, model, year combination
              idCar:
                type: number
                description: The car's ID
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  message:
                    type: string
                    description: success will be returned
                  data:
                    type: object
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    patch:
      description: Patch to update status of a service new/upcoming/done
      operationId: v1.patchIssueStatusById
      tags:
        - Archive
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
        - name: data
          in: body
          required: true
          description: New issue properties
          schema:
            properties:
              status:
                type: string
                description: New status for the issue new/upcoming/done
            required:
              - status
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  message:
                    type: string
                    description: success will be returned
                  data:
                    type: object
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: delete an issue
      operationId: v1.deleteIssueByIssueId
      tags:
        - Service
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
      responses:
        "200":
          description: Success
          schema:
            properties:
              meta:
                type: object
                properties:
                  message:
                    type: string
                    description: success will be returned
                  data:
                    type: object
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/issues/{issueId}/relevant-service-records":
    x-swagger-router-controller: issue
    get:
      description: gets service records relevant to a given issue
      operationId: v1.getRelevantServiceRecords
      tags:
        - Service
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
        - name: code
          type: string
          in: query
          required: true
          description: Issue Code
        - name: shopId
          type: number
          in: query
          required: true
          description: shop ID
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/issues/{issueId}/troubleshooting":
    x-swagger-router-controller: issue
    get:
      description: get the issue troubleshooting info from science db
      operationId: v1.getIssueTroubleshooting
      tags:
        - Service
      parameters:
        - name: issueId
          type: number
          in: path
          required: true
          description: ID for an issue
        - name: code
          type: string
          in: query
          required: true
          description: Issue Code
        - name: fmiCode
          type: string
          in: query
          required: true
          description: Issue FMI Code
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/issues/settings/{shopId}":
    x-swagger-router-controller: issue
    get:
      description: get all shop issue settings for a particualr shop
      operationId: v1.getShopIssueSettingsByShop
      tags:
        - Service
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: Shop Id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/IssueData"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/campaign":
    x-swagger-router-controller: campaign
    get:
      description: get all campaigns
      operationId: v1.getCampaigns
      tags:
        - Archive
      parameters:
        - name: isActive
          type: boolean
          in: query
          required: false
          description: active or not
        - name: name
          type: string
          in: query
          required: false
          description: campaign name
        - name: idOwner
          type: number
          in: query
          required: false
          description: owner ID number
        - name: type
          type: string
          in: query
          required: false
          description: singular or repeated
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: Campaign list
                items:
                  $ref: "#/definitions/Campaign"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/campaign/{campaignId}":
    x-swagger-router-controller: campaign
    get:
      description: get campaign by id
      operationId: v1.getCampaignById
      tags:
        - Archive
      parameters:
        - name: campaignId
          in: path
          type: number
          description: id of campaign
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: Campaign by id
                type: array
                items:
                  $ref: "#/definitions/Campaign"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/next-page/{paginationToken}":
    x-swagger-router-controller: pagination
    get:
      description: Get next page
      operationId: v1.getNextPage
      tags:
        - Archive
      parameters:
        - name: paginationToken
          in: path
          description: mileage to get prediction for
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: array
                items:
                  type: object
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/algoresults":
    x-swagger-router-controller: car
    get:
      description: Get service algorithm prediction based on carId.
      operationId: v1.getCarServiceAlgoResults
      tags:
        - Car
      parameters:
        - name: carId
          type: number
          in: path
          description: car Internal ID
          required: true
        - name: shopId
          type: number
          required: false
          in: query
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  item:
                    description: item field
                    type: string
                  description:
                    description: Description of the service
                    type: string
                  failure:
                    description: Failure
                    type: string
                  vin:
                    description: VIN
                    type: string
                  report:
                    $ref: "#/definitions/responseReport"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/alert":
    x-swagger-router-controller: car
    get:
      description: Get car by property
      operationId: v1.getCarAlert
      tags:
        - Car
      parameters:
        - name: carId
          type: number
          in: path
          description: car id
          required: true
        - name: alertType
          in: query
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/driverhistory":
    x-swagger-router-controller: car
    get:
      description: Get driver history based on carId.
      operationId: v1.getCarDriverHistory
      tags:
        - Car
      parameters:
        - name: carId
          type: number
          in: path
          description: car Internal ID
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  item:
                    description: item field
                    type: string
                  description:
                    description: Description of the service
                    type: string
                  failure:
                    description: Failure
                    type: string
                  vin:
                    description: VIN
                    type: string
                  report:
                    $ref: "#/definitions/responseReport"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/next-service-date":
    x-swagger-router-controller: car
    get:
      description: Get car's predicted next service date based on upcoming servies and mileage_history data. Mileage can be provided manually in query to get the prediction for that specific mileage.
      operationId: v1.getCarServiceDate
      tags:
        - Car
      parameters:
        - name: carId
          type: number
          in: path
          description: Car internal ID
          required: true
        - name: mileage
          in: query
          description: mileage to get prediction for
          required: false
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  predictedDate:
                    description: Predicted service date
                    type: string
                  confidenceInterval:
                    description: Plus minus how many days
                    type: number
                  confidenceLevel:
                    description: Probability between 0 and 1
                    type: number
                  nextServiceMileage:
                    description: Service mileage that the prediction is for
                    type: number
                  isRecent:
                    description: Was last mileage update in the past 2 weeks
                    type: boolean
                  dataPoints:
                    description: Number of mileage data points found and used
                    type: number
                  isCarCreatedInLastMonth:
                    description: Was car created in the last month
                    type: boolean
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/{carId}/report":
    x-swagger-router-controller: vehicleReport
    get:
      description: Get vehicle report
      operationId: v1.getVehicleReport
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: integer
          description: Unique car identifier
        - name: limit
          in: query
          required: false
          type: integer
          description: max number of issues to return
        - name: fileName
          in: query
          required: false
          type: string
          description: name of saved file
        - name: statuses
          in: query
          required: false
          description: list of status records to filter - pending, new, waitingForApproval, done
          type: array
          items:
            type: string
        - name: sources
          in: query
          required: false
          description: list of issue sources to filter - dtc, archive, algorithm, user, dataone, routine, preset, recall, lightVehicleDTC, heavyVehicleDTC
          type: array
          items:
            type: string
        - name: userId
          in: query
          required: false
          type: integer
          description: User ID to use settings
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: Vehicle report for specific vehicle id
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/asset-duration/{shopId}":
    x-swagger-router-controller: vehicleReport
    get:
      description: Get assets deuration
      operationId: v1.getAssetDuration
      tags:
        - Car
      parameters:
        - name: shopId
          in: path
          required: true
          type: integer
          description: Unique car identifier
        - name: limit
          in: query
          required: false
          type: integer
          description: max number of assets to return
        - name: statuses
          in: query
          required: true
          description: status of the vehicle
          type: array
          items:
            type: string
        - name: days
          in: query
          required: true
          type: integer
          description: Number of days i.e 90
        - name: search
          in: query
          required: false
          type: string
          description: search by unit id
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: Vehicle durations
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/asset-availability/{shopId}":
    x-swagger-router-controller: vehicleReport
    get:
      description: Get Assets Availability
      operationId: v1.getAssetsAvailability
      tags:
        - Car
      parameters:
        - name: shopId
          in: path
          required: true
          type: integer
          description: Unique car identifier
        - name: startDate
          in: query
          required: true
          type: string
          description: start date
        - name: endDate
          in: query
          required: false
          type: string
          description: end date
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: Vehicle durations
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/cars/{carId}/notes":
    x-swagger-router-controller: car
    put:
      description: Update car notes
      operationId: v1.updateCarNotes
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: number
          description: Unique car identifier
        - name: payload
          in: body
          required: true
          description: Car notes to be updated
          schema:
            properties:
              notes:
                description: The new car notes
                type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car":
    x-swagger-router-controller: car
    get:
      description: Get car by property
      operationId: v1.getCarByParams
      tags:
        - Car
      parameters:
        - name: scope
          in: query
          required: false
          type: string
          description: "query for a specific scope of attributes to retrieve, filters other than vin are ignored. \
                        valid scopes: ['basicInfo', 'count']"
        - name: vin
          in: query
          required: false
          type: string
        - name: licensePlate
          in: query
          required: false
          type: string
        - name: shopId
          required: false
          in: query
          type: number
        - name: userId
          in: query
          required: false
          type: number
        - name: carName
          in: query
          required: false
          description: Car Identifier
          type: string
        - name: make
          in: query
          required: false
          description: Car make
          type: string
        - name: model
          in: query
          required: false
          description: Car model
          type: string
        - name: year
          in: query
          required: false
          description: Car Year
          type: string
        - name: source
          in: query
          required: false
          description: android/ios/dashboard/auto
          type: string
        - name: limit
          in: query
          required: false
          description: pagination
          type: number
        - name: offset
          in: query
          required: false
          description: pagination
          type: number
        - name: scanner
          in: query
          required: false
          description: Scanner ID
          type: string
        - name: name
          in: query
          required: false
          description: Name of user
          type: string
        - name: hasServicePriority
          in: query
          required: false
          description: priority of issues
          type: string
        - name: sort
          in: query
          required: false
          description: Sorting based on "scanner", "-scanner"
          type: string
        - name: sortPm
          in: query
          required: false
          description: Sorting based on "percentage", "-percentage"
          type: string
        - name: sortSafetyPm
          in: query
          required: false
          description: Sorting Safety Pm based on "percentage", "-percentage"
          type: string
        - name: connectivityStatus
          in: query
          required: false
          description: status of device connection
          type: string
        - name: maxPriority
          in: query
          required: false
          description: Maximum priority of vehicle's issues
          type: string
        - name: recommendedAction
          in: query
          required: false
          description: Recommended action, can be "Service Immediately", "Call Driver", or "No Immediate Action"
          type: string
        - name: carIds
          in: query
          required: false
          description: car ids to query
          type: string
        - name: exclude
          in: query
          required: false
          description: attributes to exclude (comma separated string)
          type: string
        - name: car_status
          in: query
          type: string
          required: false
          description: a list of car_status separated by comma
        - name: nextPmFilter
          in: query
          required: false
          description: Filtering for next PMs  (comma separated string)
          type: string
        - name: safetyNextPmFilter
          in: query
          required: false
          description: Filtering for safety next PMs  (comma separated string)
          type: string
        - name: tagNames
          in: query
          required: false
          description: Filtering by Tag Names  (comma separated string)
          type: string
        - name: dvirStatus
          in: query
          type: string
          required: false
          description: filter on the `dvirStatus` field, comma separated
        - name: car_type
          in: query
          type: string
          required: false
          description: filter on the `car_type` field, "Trailer or Vehicle"
        - name: engineLightStatus
          in: query
          type: string
          required: false
          description: filter on the `engineLightStatus` field, 'check-engine-light', 'engine-light', 'engine-protect-lamp', 'mil-lamp', 'red-stop-lamp' - comma separated
        - name: issues
          in: query
          type: string
          required: false
          description: filter on the `issues` field, 'critical', 'major' or 'minor' - comma separated
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: Create new car
      operationId: v1.createCar
      tags:
        - Car
      parameters:
        - name: car
          in: body
          required: true
          description: New car properties
          schema:
            properties:
              vin:
                type: string
                description: Vehicle Identification Number
              licensePlate:
                type: string
                description: Vehicle license plate
              baseMileage:
                type: number
                description: Starting mileage of car
              userId:
                type: number
                description: Unique user identifier
              salesperson:
                type: string
                description: Name of salesperson who sold the car
              carName:
                type: string
                description: Identifier of the car
              source:
                type: string
                description: ios/android/dashboard/auto
              engineHours:
                type: number
                description: vehicle engine hours
              carClass:
                type: number
                description: vehicle classification. Values range from 1 - 8 inclusive.
            required:
              - vin
              - baseMileage
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/decodeVin":
    x-swagger-router-controller: car
    get:
      description: Get decoded car information after passing in a vin
      operationId: v1.decodeVin
      tags:
        - Car
      parameters:
        - name: vin
          in: query
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/archive":
    x-swagger-router-controller: car
    post:
      description: Archive assets
      operationId: v1.archiveAssets
      tags:
        - Car
      parameters:
        - name: payload
          in: body
          required: true
          description: The asset informations to archive
          schema:
            properties:
              assetIds:
                type: array
                items:
                  type: number
              notes:
                type: string
                description: Identifier of the car
              shopId:
                type: number
                description: associated shopId of the trailer
            required:
              - assetIds
              - shopId
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/newPm":
    x-swagger-router-controller: car
    post:
      description: Insert a new PM to a car
      operationId: v1.insertNewCarPM
      tags:
        - Car
      parameters:
        - name: payload
          in: body
          required: true
          description: PM Info
          schema:
            properties:
              data:
                type: object
                description: PM Info object
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/serviceName":
    x-swagger-router-controller: car
    post:
      description: Insert a new Service Name
      operationId: v1.insertNewServiceName
      tags:
        - Car
      parameters:
        - name: payload
          in: body
          required: true
          description: Create new Service Name
          schema:
            properties:
              data:
                type: object
                description: Service Name Object
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/car/serviceName/{shopId}":
    x-swagger-router-controller: car
    get:
      description: Get Services Names
      operationId: v1.getServiceNames
      tags:
        - Car
      parameters:
        - name: shopId
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/car/restore":
    x-swagger-router-controller: car
    post:
      description: Restore assets
      operationId: v1.restoreAssets
      tags:
        - Car
      parameters:
        - name: payload
          in: body
          required: true
          description: The asset informations to restore
          schema:
            properties:
              assetIds:
                type: array
                items:
                  type: number
              notes:
                type: string
                description: Identifier of the car
              shopId:
                type: number
                description: associated shopId of the trailer
            required:
              - assetIds
              - shopId
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/createGeneric":
    x-swagger-router-controller: car
    post:
      description: Create new asset
      operationId: v1.createGeneric
      tags:
        - Car
      parameters:
        - name: payload
          in: body
          required: true
          description: New asset properties
          schema:
            properties:
              vin:
                type: string
                description: Vehicle Identification Number
              unitId:
                type: string
                description: Identifier of the car
              mileageInKm:
                type: number
                description: Starting mileage of trailer
              engineHourInSecond:
                type: number
                description: vehicle engine hours
              make:
                type: string
                description: Trailer make
              model:
                type: string
                description: Name of salesperson who sold the car
              year:
                type: string
                description: ios/android/dashboard/auto
              location:
                type: string
                description: free text of trailer location
              mainDriver:
                type: string
                description: free text of trailer's main driver
              source:
                type: string
                description: where the data source is, e.g. "user", "samsara"
              shopId:
                type: number
                description: associated shopId of the trailer
            required:
              - unitId
              - source
              - shopId
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/shop":
    x-swagger-router-controller: car_shop
    get:
      description: Get car-shop relations by parameters
      operationId: v1.getCarShop
      tags:
        - Car
      parameters:
        - name: carId
          in: query
          required: false
          description: Unique car identifier
          type: number
        - name: shopId
          in: query
          required: false
          description: Unique shop identifier
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Car-shop relations matching query
                type: array
                items:
                  $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: Create new car-shop relation
      operationId: v1.createCarShop
      tags:
        - Archive
      parameters:
        - name: carShop
          in: body
          required: true
          description: Car-shop relation parameters
          schema:
            properties:
              carId:
                description: Unique car identifier
                type: number
              shopId:
                description: Unique shop identifier
                type: number
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: delete car-shop relation
      operationId: v1.deleteCarShopAssociation
      tags:
        - Archive
      parameters:
        - name: carId
          in: query
          required: true
          type: number
        - name: shopId
          in: query
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}":
    x-swagger-router-controller: car
    get:
      description: Get car by car id
      operationId: v1.getCarById
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: integer
          description: Unique car identifier
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    put:
      description: Update car by car id
      operationId: v1.updateCar
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: number
          description: Unique car identifier
        - name: car
          in: body
          required: true
          description: Car properties to be updated
          schema:
            properties:
              totalMileage:
                description: Total mileage of the car
                type: number
              userId:
                type: number
                description: Unique user identifier
              salesperson:
                type: string
                description: Name of salesperson who sold the car
              carName:
                type: string
                description: New name of car.
              engineHours:
                description: Total engine hours of the car
                type: number
              meta:
                type: object
                description: Additional information about car, will ovewrite the entire meta object
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    patch:
      description: Update car settings.
      operationId: v1.patchCar
      tags:
        - Car
      parameters:
        - name: carId
          description: Unique car identifier
          type: number
          required: true
          in: path
        - name: car
          in: body
          required: true
          description: Car properties
          schema:
            properties:
              vin:
                type: string
                description: Vehicle Identification Number
              licensePlate:
                type: string
                description: Vehicle Identification Number
              baseMileage:
                type: number
                description: Starting mileage of car
              serviceMileage:
                type: number
                description: Service mileage of car
              totalMileage:
                type: number
                description: Total mileage of car
              year:
                type: number
                description: Car year
              make:
                type: string
                description: Car make
              model:
                type: string
                description: Car model
              trim:
                type: string
                description: Car trim
              tankSize:
                type: string
                description: Car tank
              engine:
                type: string
                description: Car engine
              cityMileage:
                type: string
                description: City mileage
              highwayMileage:
                type: string
                description: Highway mileage
              userId:
                type: number
                description: Unique user identifier
              carName:
                type: string
                description: New name of car.
              meta:
                type: object
                description: Meta information
              odometerType:
                type: string
                description: meta object odometer type descriptor
              salesperson:
                type: string
                description: Name of salesperson who sold the car
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/shop/{carShopId}":
    x-swagger-router-controller: car_shop
    put:
      description: Update specific car-shop relation
      operationId: v1.updateCarShop
      tags:
        - Archive
      parameters:
        - name: carShopId
          description: Unique car-shop identifier
          in: path
          required: true
          type: number
        - name: carShop
          in: body
          required: true
          description: Car-shop relation parameters
          schema:
            properties:
              carId:
                description: Unique car identifier
                type: number
              shopId:
                description: Unique shop identifier
                type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/shop/{shopId}/high-priority-vehicles":
    x-swagger-router-controller: car_shop
    get:
      description: Gets all high priority vehicles for a shop
      operationId: v1.getHighPriorityVehicles
      tags:
        - Car
      parameters:
        - name: shopId
          description: Unique shopId identifier
          in: path
          required: true
          type: number
        - name: lookbackDays
          description: lookback time in days
          in: query
          required: true
          type: number
        - name: numVehiclesReturned
          description: limit to number of high priority vehicles returned
          in: query
          required: false
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                type: object
                description: object with information on all high priority vehicles
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/shop/{shopId}/has-cars":
    x-swagger-router-controller: car_shop
    get:
      description: Check if the shop has cars
      operationId: v1.checkIfShopHasCars
      tags:
        - Car
      parameters:
        - name: shopId
          description: Unique shopId identifier
          in: path
          required: true
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                type: object
                description: object with a boolean to check if shop has cars
                properties:
                  data:
                    type: boolean
                    description: true when cars exists or false when not
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/shop/{shopId}/real-cars-count":
    x-swagger-router-controller: car_shop
    get:
      description: Count for shop real cars
      operationId: v1.countShopRealCars
      tags:
        - Car
      parameters:
        - name: shopId
          description: Unique shopId identifier
          in: path
          required: true
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                type: object
                description: object with a number with the count result
                properties:
                  data:
                    type: integer
                    description: the number of real cars linked to the fleet
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/shop":
    x-swagger-router-controller: car_shop
    put:
      description: Update car-shop record by car id
      operationId: v1.updateCarShopByCarId
      tags:
        - Archive
      parameters:
        - name: carId
          in: path
          type: number
          required: true
          description: Unique car identifier
        - name: carShop
          in: body
          required: true
          description: Car-shop relation properties
          schema:
            properties:
              shopId:
                description: Unique shop identifier
                type: number
            required:
              - shopId
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/scanner/{scannerId}":
    x-swagger-router-controller: car
    delete:
      description: Delete scanner Id from the supplied carId
      operationId: v1.deleteScanner
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          type: number
          required: true
        - name: scannerId
          in: path
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/scanner":
    x-swagger-router-controller: car
    put:
      description: Set a scanner as the active scanner of a car
      operationId: v1.putScanner
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          type: number
          required: true
        - name: data
          in: body
          required: true
          schema:
            properties:
              scannerId:
                type: string
            required:
              - scannerId
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/status":
    x-swagger-router-controller: car
    put:
      description: Set a status as new car status
      operationId: v1.putStatus
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          type: number
          required: true
        - name: data
          in: body
          required: true
          schema:
            properties:
              status:
                type: string
            required:
              - status
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/vendor":
    x-swagger-router-controller: car
    put:
      description: Set a status as new car status
      operationId: v1.putCarVendor
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          type: number
          required: true
        - name: data
          in: body
          required: true
          schema:
            properties:
              idVendor:
                type: number
            required:
              - idVendor
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/pm":
    x-swagger-router-controller: car
    post:
      description: Update PM status from a car
      operationId: v1.updateCarPM
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          type: number
          required: true
        - name: payload
          in: body
          required: true
          description: Issues Info
          schema:
            properties:
              data:
                type: object
                description: Issues Info object
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/documents":
    x-swagger-router-controller: car
    get:
      description: Get car documents by car id
      operationId: v1.getCarDocuments
      tags:
        - Car
      parameters:
        - name: carId
          description: Unique carId identifier
          in: path
          required: true
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                type: object
                description: object with a number with the count result
                properties:
                  data:
                    type: integer
                    description: the number of real cars linked to the fleet
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    put:
      description: Upsert car documents by car id
      operationId: v1.upsertCarDocuments
      tags:
        - Car
      parameters:
        - name: carId
          description: Unique carId identifier
          in: path
          required: true
          type: number
        - name: data
          in: body
          required: true
          schema:
            properties:
              documents:
                type: array
                items:
                  type: object
                  properties:
                    carId:
                      type: number
                    id:
                      type: number
                    sectionId:
                      type: string
                    name:
                      type: string
                    url:
                      type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  /v1/trailer:
    x-swagger-router-controller: trailer
    post:
      description: Create new trailer
      operationId: v1.createTrailer
      tags:
        - Trailer
      parameters:
        - name: payload
          in: body
          required: true
          description: New car properties
          schema:
            properties:
              vin:
                type: string
                description: Vehicle Identification Number
              unitId:
                type: string
                description: Identifier of the car
              mileageInKm:
                type: number
                description: Starting mileage of trailer
              engineHourInSecond:
                type: number
                description: vehicle engine hours
              make:
                type: string
                description: Trailer make
              model:
                type: string
                description: Name of salesperson who sold the car
              year:
                type: string
                description: ios/android/dashboard/auto
              location:
                type: string
                description: free text of trailer location
              mainDriver:
                type: string
                description: free text of trailer's main driver
              source:
                type: string
                description: where the data source is, e.g. "user", "samsara"
              shopId:
                type: number
                description: associated shopId of the trailer
              externalPayload:
                type: object
                description: raw data from external source
            required:
              - unitId
              - source
              - shopId
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trailer/id":
      x-swagger-router-controller: trailer
      post:
        description: create id for trailer in car_samsara table for DVIR
        operationId: v1.createIdForTrailer
        tags:
          - Trailer
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            required: true
            schema:
              required:
                - trailerName
              properties:
                trailerName:
                  type: string
                  description: Name of the Trailer or Asset ID.
        responses:
          "200":
            description: "Success"
            schema:
              properties:
                status:
                  type: string
                  description: Status of the onboarding process.
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  "/v1/user/search":
    x-swagger-router-controller: user
    get:
      description: Get user by any search terms
      operationId: v1.getUserBySearch
      tags:
        - User
      parameters:
        - name: search
          type: string
          in: query
          description: Search value
          required: true
        - name: exact
          type: boolean
          in: query
          description: Exact match?
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of users matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/User"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/user/{userId}/settings":
    x-swagger-router-controller: user
    patch:
      description: Update user settings. This endpoint will update user settings with given properties. It will add new properties and overwrite existing ones (deep).
      operationId: v1.patchUserSettings
      tags:
        - User
      parameters:
        - name: userId
          description: Unique user identifier
          type: number
          required: true
          in: path
        - name: settings
          description: Settings object
          in: body
          required: true
          schema:
            properties:
              settings:
                type: object
            required:
              - settings
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/UserSetting"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/user/is-available":
    x-swagger-router-controller: user
    get:
      description: Check whether a user can be created with given properties
      operationId: v1.checkEmailAvailability
      tags:
        - User
      parameters:
        - name: email
          description: User's email
          in: query
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  available:
                    description: TRUE if user with the given properties can be created and FALSE otherwise
                    type: boolean
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/sensor-data":
    x-swagger-router-controller: sensorData
    get:
      description: Get sensor data by search terms (not implemented yet)
      operationId: getSensorData
      tags:
        - Archive
      parameters:
        - name: vin
          in: query
          description: Array of vehicle identification numbers sensor-data are associated with
          required: false
          type: string
        - name: deviceId
          in: query
          description: Array of device ID-s sensor data are associated with
          required: false
          type: string
        - name: deviceType
          in: query
          description: Array of device types that sensor data are associated with
          required: false
          type: string
        - name: sid
          in: query
          description: Array of sensor ID-s to retrieve; if not given, everything will be returned
          required: false
          type: string
        - name: from
          in: query
          description: ISO-8601 timestamp indicating the earlies time for sensor data retrieval
          required: false
          type: string
        - name: to
          in: query
          description: ISO-8601 timestamp indicating the latest time for sensor data retrieval
          required: false
          type: string
        - name: order
          in: query
          description: Ordering by retrieved columns
          required: false
          type: string
        - name: dir
          in: query
          description: Ordering directions corresponding with columns; must have the same length as order (will throw a 400 if given without order coulumns); each element must be either 'asc' or 'desc'
          required: false
          type: string
        - name: limit
          in: query
          description: Limit on the number of records returned; default `100`
          required: false
          type: integer
        - name: offset
          in: query
          description: Offset point from the beginning of the list; default `0`
          required: false
          type: integer
        - name: downsample
          in: query
          description: Get up to _n_ rows which are evenly spaced on the time axis between all records retreived; _mutually exclusive with_ `skipcount`
          required: false
          type: number
        - name: skipcount
          in: query
          description: Get every _n_-th row on the time axis; _mutually exclusive with_ `downsample`
          required: false
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of sensor data objects matching query parameters
                type: array
                items: # once swagger is updated to v3, make this work with object definitions (SensorDataObject)
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        description: Sensor data identifier which usually is the same as the column name in the big-table, e.g., pid type/name, alarm name, gps coordinate type such as logitude, or the name of anything that needs to be stored in db
                        type: string
                      data:
                        description: The data value associated with the key name
                        type: string
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: |
        Stores sensor data in db. Each sensor data object should contain an element that links the data to a specific car and device. For example:
        ```
        [{
          "id": "vin",
          "data": "0123456789abcdef0"
        },{
          "id": "deviceUUID",
          "data": "215B0004242"
        },{
          "id": "some-sensor-data",
          "data": "12345"
        }]
        ```
        This is not a strict requirement of the API; however, not having linking elements greatly reduces the usability of the stored data.
      operationId: postSensorData
      tags:
        - Scan
      parameters:
        - name: payload
          in: body
          required: true
          description: Sensor data
          schema:
            type: array
            items: # once swagger is updated to v3, make this work with object definitions (SensorDataObject)
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Data identifier which usually is the same as the column name in the big-table, e.g., pid type/name, alarm name, gps coordinate type such as logitude, or the name of anything that needs to be stored in db
                    type: string
                  data:
                    description: The data value associated with the key name
                    type: string
                  meta:
                    description: Additional information about the data in this object is passed when creating new data objects. It contains information that the server will use to process the data prior to storing it and it is not stored. Thus it will not be returned in a GET request.
                    type: object
                required:
                  - id
                  - data
      responses:
        "202":
          description: "Accepted"
          schema:
            required:
              - response
              - meta
            properties:
              response:
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Message will read something like this -- Validation passed, <Number> sensor data will be stored in db
                  hashes:
                    description: A list containing hashes of each data point sent in the request having the same order
                    type: array
                    items:
                      type: string
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/user/{userId}/apikey":
    x-swagger-router-controller: auth
    get:
      description: get a list of apikey belonging to specific user
      operationId: getApikey
      tags:
        - User
      parameters:
        - name: userId
          in: path
          type: number
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: generate an apikey
      operationId: createApikey
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: number
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/user/{userId}/apikey/{apikeyId}":
    x-swagger-router-controller: auth
    patch:
      description: enable / disable an apikey
      operationId: updateApikey
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: number
          required: true
        - name: apikeyId
          in: path
          type: number
          required: true
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              isActive:
                type: boolean
            required:
              - isActive
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trip/summary":
    x-swagger-router-controller: trip
    get:
      description: summary of all the trips retrieved by query. Details at https://goo.gl/rRSJk5
      operationId: v1.getTripSummary
      tags:
        - Trip
      parameters:
        - name: vin
          in: query
          required: false
          description: vin of car to get trips summary for
          type: string
        - name: carId
          in: query
          required: false
          description: internal id of car to get trip summary for
          type: number
        - name: toISO
          in: query
          required: false
          description: ISO date as a maximum time for when a trip is started
          type: string
        - name: fromISO
          in: query
          required: false
          description: ISO date as a minmum time for when a trip is started
          type: string
        - name: toRTC
          in: query
          required: false
          description: RTC time as a maximum time for when a trip is started
          type: number
        - name: fromRTC
          in: query
          required: false
          description: RTC time as a minimum time for when a trip is started
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                properties:
                  tripIds:
                    description: list of tripId's which contibute to the summary values
                    type: array
                    items:
                      type: number
                  totalDuration:
                    description: sum of all the time length of each trip
                    type: number
                  totalMileage:
                    description: sum of all the trips accumulated mileage
                    type: number
                  totalAlarms:
                    description: total number of alarms triggered during each trip
                    type: number
                  totalFuelConsumption:
                    description: total fuel consumed by car during each trip
                    type: number
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trip/summary/download":
    x-swagger-router-controller: trip
    get:
      description: get a list of trips by specified query parameters. Details at https://goo.gl/rRSJk5
      operationId: v1.getTripsByQueryCsv
      tags:
        - Archive
      parameters:
        - name: vin
          in: query
          required: false
          description: vin of car to get trips by
          type: string
        - name: toISO
          in: query
          required: false
          description: ISO date as a maximum time for when a trip is started
          type: string
        - name: fromISO
          in: query
          required: false
          description: ISO date as a minimum time for when a trips is started
          type: string
        - name: toRTC
          in: query
          required: false
          description: RTC time as a maximum time for when a trip is started
          type: number
        - name: fromRTC
          in: query
          required: false
          description: RTC time as a minimum time for when a trips is started
          type: number
        - name: tripId
          in: query
          required: false
          description: trip id of specific trip
          type: number
        - name: offset
          in: query
          required: false
          description: current offset.. like how many results are already downloaded.
          type: number
        - name: pageSize
          in: query
          required: false
          description: number of results to be returned. Max value is 50.
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Trips matching query
                type: array
                items:
                  $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trip/{tripId}":
    x-swagger-router-controller: trip
    put:
      description: update a trip by id. Details at https://goo.gl/rRSJk5
      operationId: v1.updateTrip
      tags:
        - Archive
      parameters:
        - name: tripId
          in: path
          type: number
          description: id of trip
          required: true
        - name: trip
          in: body
          required: true
          description: trip object to be created
          schema:
            properties:
              locationEnd:
                $ref: "#/definitions/GeoPoint"
              timeEnd:
                description: rtc end time of trip
                type: number
              mileageAccum:
                description: mileage accumulated during trip
                type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    get:
      description: get trip by id
      operationId: v1.getTripById
      tags:
        - Trip
      parameters:
        - name: tripId
          in: path
          type: number
          description: id of trip
          required: true
        - name: exclude
          in: query
          required: false
          description: a comma-separated string that indicates the attributes to be excluded. Candidates are "location", "speed".
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: delete trip by id
      operationId: v1.deleteTripById
      tags:
        - Archive
      parameters:
        - name: tripId
          in: path
          type: number
          description: id of trip
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/cars/location":
    x-swagger-router-controller: car
    get:
      description: get current location for a list of cars
      operationId: v1.getCarLocationByShop
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          type: integer
          description: ID of shop
          required: true
        - name: limit
          in: query
          description: pagination
          required: false
          type: number
        - name: offset
          in: query
          description: pagination
          required: false
          type: number
        - name: hasServicePriority
          in: query
          description: fleet location service priority
          required: false
          type: string
        - name: vin
          in: query
          description: car identifier
          required: false
          type: string
        - name: carName
          in: query
          description: car name
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                description: List of cars with current location
                type: array
                items:
                  $ref: "#/definitions/CarsLocationDriverObject"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/algostats":
    x-swagger-router-controller: carScore
    get:
      description: get stats about running algorithms
      operationId: shopVehicleAlgorithmStats
      tags:
        - Algorithm
      parameters:
        - name: shopId
          in: path
          type: integer
          description: ID of shop
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                description: Status of algorithms
                type: array
                items:
                  $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/vehiclecoststats":
    x-swagger-router-controller: shopScore
    get:
      description: get stats about cost from service records
      operationId: shopVehicleCostStats
      tags:
        - FleetCostStats
      parameters:
        - name: shopId
          in: path
          type: integer
          description: ID of shop
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              data:
                description: Cost stats from a fleet
                type: array
                items:
                  $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/cars/multiple-engine-light-status":
    x-swagger-router-controller: car
    get:
      description: get engine light status for a car
      operationId: v1.getMultipleEngineLightStatus
      tags:
        - Archive
      parameters:
        - name: carIds
          in: query
          type: string
          description: IDs of cars
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/engine-light-status":
    x-swagger-router-controller: car
    get:
      description: get engine light status for a car
      operationId: v1.getEngineLightStatusById
      tags:
        - Archive
      parameters:
        - name: carId
          in: path
          type: number
          description: ID of car
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/location":
    x-swagger-router-controller: car
    get:
      description: get current location for a car by carId
      operationId: v1.getCarLocationById
      tags:
        - Archive
      parameters:
        - name: carId
          in: path
          type: number
          description: ID of car
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trip/{tripId}/polyline":
    x-swagger-router-controller: trip
    get:
      description: get trip by id
      operationId: v1.getTripPolyline
      tags:
        - Archive
      parameters:
        - name: tripId
          in: path
          type: number
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/alarms":
    x-swagger-router-controller: trip
    post:
      description: post alarms recorded in mobile device
      operationId: v1.postAlarm
      tags:
        - Archive
      parameters:
        - name: payload
          in: body
          required: true
          description: incoming trips data (2 types of packets, trip indicator(provide trip start & end info) & trip data packets(tris journey info). )
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  description: alarm name
                  type: string
                data:
                  description: The data value associated with the key name
                  type: string
                meta:
                  description: Timestamp of the alarms will be passsed to identify the relevant trip.
                  type: object
              required:
                - id
                - data
      responses:
        "201":
          description: "Created"
          schema:
            required:
              - response
              - meta
            properties:
              response:
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Message will read something like this -- Validation passed, <Number> sensor data will be stored in db
                  hashes:
                    description: A list containing hashes of each data point sent in the request having the same order
                    type: array
                    items:
                      type: object
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/brakeDist/{carId}":
    x-swagger-router-controller: brake
    get:
      description: get latests brake model distribution by vin
      operationId: v1.queryBrakeModelMileage
      tags:
        - Brake
      parameters:
        - name: carId
          in: path
          type: integer
          required: true
      responses:
        "200":
          description: "Found"
          schema:
            required:
              - data
            properties:
              data:
                required:
                  - vin
                  - date
                  - predicted_brake_job_mileage
                  - last_known_brake_job_mileage
                  - current_mileage
                properties:
                  vin:
                    type: string
                    description: A sequence of alphanumeric characters i.e. A4F24FWFK677K
                  date:
                    type: string
                    description: A date encoded string
                  predicted_brake_job_mileage:
                    type: integer
                    description: An integer representing the number of units (km or miles) until required maintenance
                  last_known_brake_job_mileage:
                    type: integer
                    description: An integer representing the number of units (km or miles) at which maintenance was performed
                  current_mileage:
                    type: string
                    description: An integer representing the total number of units (km or miles) travelled by the specified vehicle
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/trip":
    x-swagger-router-controller: trip
    post:
      description: create a new trip
      operationId: v1.createTrip
      tags:
        - Trip
      parameters:
        - name: payload
          in: body
          required: true
          description: incoming trips data (2 types of packets, trip indicator(provide trip start & end info) & trip data packets(tris journey info). )
          schema:
            type: array
            items: # once swagger is updated to v3, will have to update this
              type: array
              items:
                type: object
                properties:
                  id:
                    description: Data item identifier which usually is the same as the column name in the big-table, e.g., pid type/name, alarm name, gps coordinate type such as logitude, or the name of anything that needs to be stored in db
                    type: string
                  data:
                    description: The data value associated with the key name
                    type: string
                  meta:
                    description: Additional information about the data in this object is passed when creating new data objects. It contains information that the server will use to process the data prior to storing it and it is not stored. Thus it will not be returned in a GET request.
                    type: object
                required:
                  - id
                  - data
      responses:
        "201":
          description: "Created"
          schema:
            required:
              - response
              - meta
            properties:
              response:
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Message will read something like this -- Validation passed, <Number> sensor data will be stored in db
                  hashes:
                    description: A list containing hashes of each data point sent in the request having the same order
                    type: array
                    items:
                      type: object
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    get:
      description: get a list of trips by specified query parameters. Details at https://goo.gl/rRSJk5
      operationId: v1.getTripsByQuery
      tags:
        - Trip
      parameters:
        - name: vin
          in: query
          required: false
          description: vin of car to get trips by
          type: string
        - name: toISO
          in: query
          required: false
          description: ISO date as a maximum time for when a trip is started
          type: string
        - name: fromISO
          in: query
          required: false
          description: ISO date as a minimum time for when a trips is started
          type: string
        - name: toRTC
          in: query
          required: false
          description: RTC time as a maximum time for when a trip is started
          type: number
        - name: fromRTC
          in: query
          required: false
          description: RTC time as a minimum time for when a trips is started
          type: number
        - name: tripId
          in: query
          required: false
          description: trip id of specific trip
          type: string
        - name: offset
          in: query
          required: false
          description: current offset.. like how many results are already downloaded.
          type: number
        - name: pageSize
          in: query
          required: false
          description: number of results to be returned. Max value is 50.
          type: number
        - name: exclude
          in: query
          required: false
          description: a comma-separated string that indicates the attributes to be excluded. Candidates are "location", "speed".
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Trips matching query
                type: array
                items:
                  $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: Mark a trip removed in DB
      operationId: v1.deleteTrip
      tags:
        - Trip
      parameters:
        - name: tripId
          in: query
          required: true
          type: string
        - name: vin
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/tripspid":
    x-swagger-router-controller: trip
    get:
      description: get a list of trips by specified query parameters. Details at https://goo.gl/rRSJk5
      operationId: v1.getTripsWithPid
      tags:
        - Archive
      parameters:
        - name: vin
          in: query
          required: false
          description: vin of car to get trips by
          type: string
        - name: offset
          in: query
          required: false
          description: current offset.. like how many results are already downloaded.
          type: number
        - name: pageSize
          in: query
          required: false
          description: number of results to be returned. Max value is 50.
          type: number
        - name: limit
          in: query
          required: false
          description: number of results to be returned. Max value is 50.
          type: number
        - name: skipCount
          in: query
          required: false
          description: number of results to be returned. Max value is 50.
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Trips matching query
                type: array
                items:
                  $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/report/vehicle-health":
    x-swagger-router-controller: report
    post:
      description: Generates and stores a new vehicle health report based on engine codes and (optional) emission pid
      operationId: v1.createVehicleHealthReport
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: number
        - name: report
          in: body
          required: true
          description: New Vehicle Health Report
          schema:
            properties:
              engineCodes:
                description: JSON containing dtc codes
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    isPending:
                      type: boolean
                    rtcTime:
                      type: number
                  required:
                    - code
                    - isPending
                    - rtcTime
              pid:
                type: array
                description: JSON containing pids
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    data:
                      type: string
                    rtcTime:
                      type: number
              isInternal:
                type: boolean
                description: Default is true, if you want the user to see the report then pass false
              meta:
                type: object
                description: meta for storing other information
            required:
              - engineCodes
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Report"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car/{carId}/report/emissions":
    x-swagger-router-controller: report
    post:
      description: Generates and stores uncertified emissions report
      operationId: v1.createEmissionsReport
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: number
        - name: report
          in: body
          required: true
          description: New Emissions Report
          schema:
            properties:
              engineCodes:
                description: JSON containing dtc codes
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    isPending:
                      type: boolean
                    rtcTime:
                      type: number
                  required:
                    - code
                    - isPending
                    - rtcTime
              pid:
                type: array
                description: JSON containing pids
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    data:
                      type: string
                    rtcTime:
                      type: number
                  required:
                    - id
                    - data
              isInternal:
                type: boolean
                description: Default is true, if you want the user to see the report then pass false
              meta:
                type: object
                description: meta for storing other information
            required:
              - pid
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Report"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/report/autotracker":
    x-swagger-router-controller: report
    post:
      description: Generates and stores autotracker report
      operationId: v1.createAutotrackerReport
      tags:
        - Archive
      parameters:
        - name: report
          in: body
          required: true
          description: New Autotracker Report
          schema:
            properties:
              vin:
                type: string
                description: Vehicle identification number
              content:
                type: object
                description: report content
            required:
              - vin
              - content
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Report"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/report":
    x-swagger-router-controller: report
    get:
      description: get a list of reports by specified query parameters
      operationId: v1.getReportsByQuery
      tags:
        - Summary Report
      parameters:
        - name: type
          in: query
          required: false
          description: report type "vhr | emissions | autotracker"
          type: string
        - name: vin
          in: query
          required: false
          description: vin
          type: string
        - name: carId
          in: query
          required: false
          description: carId for the report
          type: integer
        - name: isInternal
          in: query
          required: false
          description: true - reports users cannot see.false -access only reports accessible by users -else all
          type: boolean
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Reports matching query
                type: array
                items:
                  $ref: "#/definitions/Report"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/summaryReport":
    x-swagger-router-controller: summaryReport
    get:
      description: get a list of summaries by specified query parameters
      operationId: v1.getSummaryReport
      tags:
        - Summary Report
      parameters:
        - name: type
          in: query
          required: false
          description: report type "alarm | drivingUtilization | maintenance | brakeUsage | vmrs"
          type: string
        - name: vin
          in: query
          required: false
          description: vin
          type: string
        - name: shopId
          in: query
          required: false
          description: shopId for the report
          type: integer
        - name: carId
          in: query
          required: false
          description: carId for the report
          type: integer
        - name: startDate
          in: query
          description: ISO-8601 timestamp indicating the latest time for sensor data retrieval
          required: false
          type: string
        - name: endDate
          in: query
          description: ISO-8601 timestamp indicating the latest time for sensor data retrieval
          required: false
          type: string
        - name: sort
          in: query
          required: false
          description: Sorting based on "score", "-score"
          type: string
        - name: limit
          in: query
          required: false
          description: limit number of data
          type: number
        - name: offset
          in: query
          required: false
          description: pagination
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of Reports matching query
                type: array
                items:
                  $ref: "#/definitions/Report"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/summaryReport/{shopId}/{type}":
    x-swagger-router-controller: summaryReport
    delete:
      description: delete a summary fleet services report cache from a specific shop
      operationId: v1.deleteSummaryReport
      tags:
        - Summary Report
      parameters:
        - name: shopId
          in: path
          required: true
          description: shopId for the report
          type: integer
        - name: type
          in: path
          required: true
          description: report type "drivingUtilization"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shops/{shopId}/cars/score":
    x-swagger-router-controller: carScore
    get:
      description: get cars from shop with ranking
      operationId: shopCarScore
      tags:
        - Car Score
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/car/{carId}/score":
    x-swagger-router-controller: carScore
    get:
      description: get cars from shop with ranking
      operationId: carScore
      tags:
        - Car Score
      parameters:
        - name: carId
          in: path
          description: id of the car
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/cars/health-score":
    x-swagger-router-controller: carScore
    get:
      description: get cars from shop with ranking according to the vehicle health score
      operationId: shopCarHealthScore
      tags:
        - Car Score
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/cars/idle-score":
    x-swagger-router-controller: carScore
    get:
      description: get cars from shop with ranking according to the vehicle idle score
      operationId: shopCarIdleScore
      tags:
        - Car Idle Score
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/cars/specific-issues-widget":
    x-swagger-router-controller: carScore
    get:
      description: gets a list of vehicles with certain specified types of issues
      operationId: vehiclesWithSpecificIssues
      tags:
        - Car Specific Issue
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
        - name: issueSearchString
          in: query
          description: Query string to search issue names for
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/cars/{carId}/general-report":
    x-swagger-router-controller: carScore
    get:
      description: get various scores and metrics for a given vehicle
      operationId: vehicleGeneralReport
      tags:
        - Vehicle General Report
      parameters:
        - name: carId
          in: path
          description: id of the car
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  # v0 endpoints
  "/login":
    x-swagger-router-controller: auth
    post:
      description: login with username and password
      operationId: passwordAuth
      tags:
        - Auth
      parameters:
        - name: credentials
          in: body
          required: true
          description: username and password
          schema:
            properties:
              username:
                type: string
              password:
                type: string
                description: raw password with length of 8 to 55 chars
              installationId:
                type: string
            required:
              - username
              - password
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/geotab":
    x-swagger-router-controller: auth
    post:
      description: login with username and password
      operationId: geotabAuth
      tags:
        - Auth
      parameters:
        - name: credentials
          in: body
          required: true
          description: Login with geotab
          schema:
            properties:
              database:
                type: string
              sessionId:
                type: string
              username:
                type: string
              serverPath:
                type: string
            required:
              - database
              - sessionId
              - username
              - serverPath
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/social":
    x-swagger-router-controller: auth
    post:
      description: login with social identifier
      operationId: socialAuth
      tags:
        - Auth
      parameters:
        - name: credentials
          in: body
          required: true
          description: username and password
          schema:
            properties:
              accessToken:
                type: string
                description: access token from auth provider
              provider:
                type: string
                description: name of supported providers ,e.g. facebook
              installationId:
                type: string
            required:
              - accessToken
              - provider
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/legacy":
    x-swagger-router-controller: auth
    post:
      description: login with Parse auth data
      operationId: legacyAuth
      tags:
        - Archive
      parameters:
        - name: credentials
          in: body
          required: true
          description: Parse userId and session token
          schema:
            properties:
              userId:
                type: string
                description: objectId of user in Parse
              sessionToken:
                type: string
                description: token of existing session
              installationId:
                type: string
            required:
              - userId
              - sessionToken
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/resetPassword":
    x-swagger-router-controller: auth
    post:
      description: reset password by giving email
      operationId: resetPasswordRequestHandler
      tags:
        - Archive
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
                description: email of user to reset password
            required:
              - email
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/resetPassword/success":
    x-swagger-router-controller: auth
    post:
      description: success callback handler of password reset request
      operationId: resetPasswordSuccessHandler
      tags:
        - Auth
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
                description: email of user to reset password
              password:
                type: string
                description: new raw password
              resetPasswordApiKey:
                type: string
                description: api key for auth0 to verify sender of requset
            required:
              - email
              - password
              - resetPasswordApiKey
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/login/refresh":
    x-swagger-router-controller: auth
    post:
      description: get access token by refresh token
      operationId: withRefreshToken
      tags:
        - Auth
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              refreshToken:
                type: string
                description: the refresh token generated upon login event
            required:
              - refreshToken
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/logout":
    x-swagger-router-controller: auth
    post:
      description: revokes all refresh token that have been issued for the same user, application and audience
      operationId: logout
      tags:
        - Archive
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              refreshToken:
                type: string
                description: refresh token to be revoked
            required:
              - refreshToken
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/smoochToken":
    x-swagger-router-controller: auth
    get:
      description: get a list of reports by specified query parameters
      operationId: getSmoochToken
      tags:
        - Auth
      parameters:
        - name: userId
          in: query
          required: true
          description: pass in the userId to create the jwt token
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SmoochJWTResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/car":
    x-swagger-router-controller: car
    get:
      description: get id and VIN of car by VIN
      operationId: getCarByParameter
      tags:
        - Car
      #   security:
      #     - jwt:
      #       - all
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: false
          type: string
        - name: licensePlate
          in: query
          description: Vehicle license plate
          required: false
          type: string
        - name: userId
          in: query
          description: user id
          required: false
          type: number
        - name: shopId
          in: query
          description: shop id of car
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create new car
      operationId: createCar
      tags:
        - Car
      parameters:
        - name: car
          in: body
          required: true
          schema:
            properties:
              vin:
                type: string
              licensePlate:
                type: string
              baseMileage:
                type: number
                description: starting mileage
              userId:
                type: number
              scannerId:
                type: string
              scannerName:
                type: string
              shopId:
                type: number
              salesperson:
                type: string
            required:
              - vin
              - baseMileage
              - userId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: delete existing car
      operationId: deleteCarById
      tags:
        - Archive
      parameters:
        - name: carId
          in: query
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update existing car properties
      operationId: updateCar
      tags:
        - Car
      parameters:
        - name: car
          in: body
          required: true
          schema:
            properties:
              carId:
                type: number
              shopId:
                type: number
              totalMileage:
                type: number
                description: new mileage
              rtcTime:
                type: integer
                description: rtc (device) time at the time of manual mileage update; will be ignored if totalMileage is not provided
              deviceMileage:
                type: number
                description: device mileage at the time of manual mileage update; will be ignored if totalMileage is not provided
              userId:
                type: number
                description: new user
              salesperson:
                type: string
                description: new salesperson
            required:
              - carId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/dms/car":
    x-swagger-router-controller: car
    get:
      description: get car from dms by shopId or vin
      operationId: getCarDMS
      tags:
        - Car
      #   security:
      #     - jwt:
      #       - all
      parameters:
        - name: vin
          in: query
          description: VIN of car. This serial number uniquely defines a car.
          required: false
          type: string
        - name: shopId
          in: query
          description: shop id of the dealership/shop that associates with car.
          required: false
          type: number
        - name: isConnected
          in: query
          description: If true, then this car exists in Pitstop database, has a device, and has an active scanner
          required: false
          type: boolean
        - name: hasDevice
          in: query
          description: If true, then this car has a Pitstop device installed.
          required: false
          type: boolean
        - name: count
          in: query
          description: Number of records to be shown in each page on dealership dashboard. Defaults to 50.
          required: false
          type: number
        - name: pointer
          in: query
          description: Pointer to the location of the first record - 1. Value of pointer cannot be negative.
          required: false
          type: number
        - name: direction
          in: query
          description: Direction to search through the database. Defaults to "fwd".
          required: false
          type: string
        - name: col
          in: query
          description: Column name to sort the records by.
          required: false
          type: array
          items:
            type: string
        - name: ord
          in: query
          description: Direction to be sorted. Only accepts ASC and DESC. Defaults to ASC. The number of dir provided must be equal to the number of col provided in the query.
          required: false
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/dms/car/{vin}":
    x-swagger-router-controller: car
    get:
      description: get car's details by vin
      operationId: getDMSCarDetails
      tags:
        - Archive
      #   security:
      #     - jwt:
      #       - all
      parameters:
        - name: vin
          in: path
          description: VIN of car. This serial number uniquely defines a car.
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/car/{carId}":
    x-swagger-router-controller: car
    get:
      description: get id and VIN of car by VIN
      operationId: getCarById
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/metric":
    x-swagger-router-controller: campaign
    get:
      description: get all metrics
      operationId: getMetrics
      tags:
        - Archive
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/campaign/metric":
    x-swagger-router-controller: campaign
    get:
      description: get all campaign metrics
      operationId: getCampaignMetrics
      tags:
        - Archive
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/campaign/{campaignId}/metric":
    x-swagger-router-controller: campaign
    get:
      description: get all campaign metrics
      operationId: getCampaignMetricById
      tags:
        - Archive
      parameters:
        - name: campaignId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shop/{shopId}/pm-status":
    x-swagger-router-controller: shop
    get:
      description: get upcoming or overdue PMs for a shop
      operationId: getPMStatusForShop
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          description: shop id of car
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shop/{shopId}/pm-view-page":
    x-swagger-router-controller: shop
    get:
      description: Get shop PM view page
      operationId: getShopPMView
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          type: number
          description: ID of shop
          required: true
        - name: filter
          in: query
          type: string
          description: Allows you to filter out which PMs you want.
            Options are "overdue", "due_soon", "completed", "upcoming"
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shop/{shopId}/dvir-status-summary":
    x-swagger-router-controller: shop
    get:
      description: get vehicle availability history export based on vehicle_status from vehicle_availability_snapshot table
      operationId: getShopDvirSummary
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          type: number
          description: ID of shop
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shop/{shopId}/vehicle-availability-export":
    x-swagger-router-controller: shop
    get:
      description: get vehicle availability history export based on vehicle_status from vehicle_availability_snapshot table
      operationId: exportVehicleAvailability
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          type: number
          description: ID of shop
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shop/{shopId}/vehicle-availability":
    x-swagger-router-controller: shop
    get:
      description: get vehicle availability based on vehicle_status from car table
      operationId: getAvailability
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          type: number
          description: ID of shop
          required: true
        - name: carType
          in: query
          type: string
          description: Type of car (vehicle or trailer)
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/Trip"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/shop":
    x-swagger-router-controller: shop
    get:
      description: Returns shops to the caller
      operationId: getShops
      tags:
        - Shop
      parameters:
        - name: shopType
          in: query
          description: shopType; partner, custom, all
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create new shop
      operationId: createShop
      tags:
        - Shop
      parameters:
        - name: shop
          in: body
          required: true
          schema:
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              validatePhone:
                type: boolean
              address:
                type: string
              userId:
                type: number
              inviterId:
                type: number
              role:
                type: string
              googlePlacesId:
                type: string
            required:
              - name
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shopWithUser":
    x-swagger-router-controller: shop
    post:
      description: create new shop and create new user
      operationId: createShopWithUser
      tags:
        - Archive
      parameters:
        - name: shopInfo
          in: body
          required: true
          schema:
            properties:
              shopName:
                type: string
              phone:
                type: string
              email:
                type: string
              address:
                type: string
              password:
                type: string
              firstName:
                type: string
              lastName:
                type: string
            required:
              - shopName
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/version":
    x-swagger-router-controller: version
    get:
      description: Get versions given a platform
      operationId: getVersion
      tags:
        - Version
      parameters:
        - name: platform
          in: query
          description: The platform to get versions
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user":
    x-swagger-router-controller: user
    get:
      description: get users by parameters
      operationId: getUserByParameter
      tags:
        - User
      parameters:
        - name: hasCar
          in: query
          description: if the user has car or not
          required: false
          type: boolean
        - name: shopId
          in: query
          description: shop id of car
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create new user
      operationId: createUser
      tags:
        - User
      parameters:
        - name: user
          in: body
          required: true
          schema:
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              username:
                type: string
              phone:
                type: string
              password:
                type: string
              authData:
                type: string
              facebookId:
                type: string
              isSocial:
                type: boolean
              installationId:
                type: string
              inviterId:
                type: number
              shopId:
                type: number
            required:
              - email
              - username
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update user
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: user
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              firstName:
                type: string
              lastName:
                type: string
              phone:
                type: string
              email:
                type: string
              activated:
                type: boolean
              role:
                type: string
            required:
              - userId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/user":
    x-swagger-router-controller: user
    get:
      description: get users
      operationId: getUserDashboard
      tags:
        - User
      parameters:
        - name: hasCar
          in: query
          description: if the user has car or not
          required: false
          type: boolean
        - name: shopId
          in: query
          description: shop id of car
          required: false
          type: number
        - name: limit
          in: query
          description: limit
          required: false
          type: number
        - name: offset
          in: query
          description: offset
          required: false
          type: number
        - name: firstName
          in: query
          description: First Name
          required: false
          type: string
        - name: lastName
          in: query
          description: Last Name
          required: false
          type: string
        - name: email
          in: query
          description: Email Address
          required: false
          type: string
        - name: role
          in: query
          description: User Role customer/dealership
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update user
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: user
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              firstName:
                type: string
              lastName:
                type: string
              phone:
                type: string
              email:
                type: string
              activated:
                type: boolean
              role:
                type: string
            required:
              - userId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/add-user-to-shop":
    x-swagger-router-controller: user
    post:
      description: add user to shop
      operationId: addUserToShop
      tags:
        - User
      parameters:
        - name: user
          in: body
          required: true
          schema:
            properties:
              firstName:
                type: string
              lastName:
                type: string
              email:
                type: string
              username:
                type: string
              phone:
                type: string
              password:
                type: string
              authData:
                type: string
              facebookId:
                type: string
              isSocial:
                type: boolean
              installationId:
                type: string
              inviterId:
                type: number
              shopId:
                type: number
              isSendCredentialsByPhone:
                type: boolean
            required:
              - email
              - username
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/message":
    x-swagger-router-controller: user
    post:
      description: "Send single message to multiple users"
      operationId: messageUsers
      tags:
        - Archive
      parameters:
        - name: messageRequest
          in: body
          required: true
          schema:
            properties:
              recipients:
                type: array
                items:
                  type: integer
              message:
                $ref: "#/definitions/MessageObject"
              idOwner:
                description: Owner id number
                type: number
              shopId:
                description: Shop Id associated with the message
                type: number
            required:
              - recipients
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}":
    x-swagger-router-controller: user
    get:
      description: Returns user to the caller
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/dms/user":
    x-swagger-router-controller: user
    get:
      description: get user from dms by parameters
      operationId: getUserDMS
      tags:
        - Archive
      parameters:
        - name: firstname
          in: query
          description: First name of customer 1 in DMS data
          required: false
          type: string
        - name: lastname
          in: query
          description: Last name of customer 1 in DMS data
          required: false
          type: string
        - name: email
          in: query
          description: Email of customer 1 in DMS data
          required: false
          type: string
        - name: phone
          in: query
          description: Phone number provided by customer 1. First search by hphone, then cphone, then wphone.
          required: false
          type: string
        - name: shopId
          in: query
          description: shop id of the dealership/shop that a user buys/does his maintainance.
          required: false
          type: number
        - name: pageSize
          in: query
          description: Number of records to be shown in each page on dealership dashboard. Defaults to 50.
          required: false
          type: number
        - name: pageNumber
          in: query
          description: Current page number.
          required: false
          type: number
        - name: col
          in: query
          description: Column name to sort the records by.
          required: false
          type: array
          items:
            type: string
        - name: ord
          in: query
          description: Direction to be sorted. Only accepts ASC and DESC. Defaults to ASC. The number of dir provided must be equal to the number of col provided in the query.
          required: false
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/settings":
    x-swagger-router-controller: user
    put:
      description: Returns user to the caller
      operationId: updateUserSettings
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          type: number
        - name: settings
          in: body
          required: true
          schema:
            properties:
              settings:
                type: object
            required:
              - settings
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/user/{userId}/message/fleet-manager":
    x-swagger-router-controller: user
    post:
      description: "Send sms message to fleet manager"
      operationId: sendSmsToFleetManager
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id (main id in DB for now)"
        - name: body
          in: body
          required: true
          description: "Text to be sent"
          schema:
            properties:
              text:
                type: string
            required:
              - text
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/message":
    x-swagger-router-controller: user
    get:
      description: "Get (chat) message history for single user"
      operationId: getUserMessage
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id (main id in DB for now)"
        - name: count
          type: number
          in: query
          required: false
          description: "number of messages to return (default 100); if equal 0, will return all messages"
        - name: before
          type: number
          in: query
          required: false
          description: "unix timestamp; if given will return <count> messages before (incl.) specified time -- defaults to now()"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: "Send single message to single user"
      operationId: messageSingleUser
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
        - name: message
          in: body
          required: true
          schema:
            $ref: "#/definitions/MessageObject"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/user/{userId}/fleet-drivers":
    x-swagger-router-controller: user
    get:
      description: "get fleet managers and drivers mapping"
      operationId: v1.getFleetManagerDriverMap
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id with role dealership"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/user/{userId}/hasReadConversation":
    x-swagger-router-controller: user
    post:
      description: "Notify smooch conversations when read the messages"
      operationId: v1.hasReadConversation
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/campaign":
    x-swagger-router-controller: user
    get:
      description: "Send single message to multiple users"
      operationId: getUserCampaign
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id (main id in DB for now)"
        - name: completed
          type: string
          in: query
          required: false
          description: "want completed campaigns only (true if that is the case, false for incomplete ones)"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/campaign/{campaignId}":
    x-swagger-router-controller: user
    put:
      description: "Update user campaign response"
      operationId: updateUserCampaign
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          required: true
          type: number
          description: "pitstop user id (main id in DB for now)"
        - name: campaignId
          in: path
          required: true
          type: string
          description: "campaignId"
        - name: body
          in: body
          required: false
          description: "status to set for the campaign entry, default true and response"
          schema:
            properties:
              status:
                type: boolean
              response:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/settings":
    x-swagger-router-controller: settings
    get:
      description: get visible settings from related resources resources
      operationId: getSettingsByParameter
      tags:
        - Settings
      parameters:
        - name: userId
          in: query
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/campaign":
    x-swagger-router-controller: campaign
    get:
      description: get all campaign from related resources resources
      operationId: getCampaigns
      tags:
        - Campaign
      parameters:
        - name: shopId
          type: number
          in: query
          required: true
          description: "shopId for which you want the campaigns"
        - name: idOwner
          type: number
          in: query
          required: false
          description: owner ID number
        - name: directions
          in: query
          description: Direction to be sorted. Only accepts ASC and DESC. Defaults to ASC. The number of dir provided must be equal to the number of col provided in the query.
          required: false
          type: array
          items:
            type: string
            enum: ["ASC", "DESC"]
        - name: limit
          in: query
          description: limit the number of rows
          required: false
          type: number
        - name: offset
          in: query
          description: offset the number of rows
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/issue":
    x-swagger-router-controller: issue
    get:
      description: get a custom user issue(s)
      operationId: getCustomUserIssue
      tags:
        - Archive
      parameters:
        - name: status
          description: "new | closed | done, if not set then will get all status"
          in: query
          type: string
          required: false
        - name: userId
          description: "id referencing a record in user table"
          in: query
          type: number
          required: false
        - name: userIssueId
          description: "id in the service_user table"
          in: query
          type: number
          required: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/issue":
    x-swagger-router-controller: issue
    get:
      description: get a custom user issue(s)
      operationId: getCustomUserIssueByUserId
      tags:
        - Archive
      parameters:
        - name: status
          description: "new | closed | done, if not set then will get all status"
          in: query
          type: string
          required: false
        - name: userId
          description: "id referencing a record in user table"
          in: path
          type: number
          required: true
        - name: userIssueId
          description: "id in the service_user table"
          in: query
          type: number
          required: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/password":
    x-swagger-router-controller: auth
    post:
      description: update user's password
      operationId: updatePassword
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: payload
          in: body
          required: true
          schema:
            properties:
              oldPass:
                type: string
              newPass:
                type: string
            required:
              - oldPass
              - newPass
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/dealership-change-password":
    x-swagger-router-controller: auth
    post:
      description: endpoint that is called when the dealership wants to update another user password
      operationId: dealershipChangePassword
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: payload
          in: body
          required: true
          schema:
            properties:
              newPass:
                type: string
            required:
              - newPass
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/{userId}/credentials-for-printing":
    x-swagger-router-controller: auth
    get:
      description: endpoint that is called when the dealership wants to print a user credentials
      operationId: dealershipRequestCredentialsForPrinting
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/user/issue/{userIssueId}":
    x-swagger-router-controller: issue
    put:
      description: update a custom user issue
      operationId: updateCustomUserIssue
      tags:
        - Archive
      parameters:
        - name: userIssueId
          in: path
          required: true
          type: number
          description: "id in the service_user table"
        - name: userIssue
          in: body
          required: true
          schema:
            properties:
              action:
                type: string
              description:
                type: string
              item:
                type: string
              priority:
                type: integer
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: get a custom user issue
      operationId: getCustomUserIssueByIssueId
      tags:
        - Archive
      parameters:
        - name: userIssueId
          in: path
          required: true
          type: number
          description: "id in the service_user table"
        - name: status
          description: "new | closed | done, if not set then will get all status"
          in: query
          type: string
          required: false
        - name: userId
          description: "id referencing a record  in user table"
          in: query
          type: number
          required: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/issue":
    x-swagger-router-controller: issue
    post:
      description: create new issue
      operationId: createIssue
      tags:
        - Service
      parameters:
        - name: issue
          in: body
          required: true
          schema:
            properties:
              carId:
                type: number
              scannerId:
                type: string
              issueType:
                type: string
              status:
                type: string
              data:
                type: object
            required:
              - issueType
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update car service issue
      operationId: updateIssue
      tags:
        - Archive
      parameters:
        - name: issue
          in: body
          required: true
          schema:
            properties:
              # NOTE: add field for symptoms here
              issueId:
                type: number
              status:
                type: string
                description: "new | pending | accepted | done"
              carId:
                type: number
                description: new mileage
              daysAgo:
                type: number
                description: when the user completed service (in days)
              mileage:
                type: number
                description: mileage service was done at
            required:
              - issueId
              - status
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/car/{carId}/issues":
    x-swagger-router-controller: issue
    get:
      description: get car services by carId and type
      operationId: getCarServiceISF
      tags:
        - Service
      parameters:
        - name: carId
          description: car identifier
          in: path
          required: true
          type: number
        - name: type
          description: "valid | all | history | active | upcoming | customUser"
          in: query
          required: true
          type: string
        - name: createdBefore
          description: "filter for createdAt <= createdBefore, must be ISO timestamp. For now only supported by type=pitstop"
          in: query
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            required:
              - results
            properties:
              results:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: string
                      description: 'issue status: "done" | "active" | "pending"'
                    issues:
                      description: array of car issue objects
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            description: Pitstop internal issue id
                            type: number
                          issueType:
                            description: "Pitstop traks multiple issue types: customized, edmunds, recallmasters, mmy, preset"
                            type: string
                          status:
                            description: 'issue status: "done" | "active" | "pending"'
                            type: string
                          doneAt:
                            description: date and time when the issue was fixed at the shop
                            type: string
                          createdAt:
                            description: date and time when the issue record was created
                            type: string
                          updateAt:
                            description: date and time when the issue record was updated
                            type: string
                          priority:
                            description: issue priority rank from least (0) to most (5) critical
                            type: number
                          mileage:
                            description: car odometer reading when issue was fixed (will be number in v1)
                            type: string
                          externalReference:
                            description: array of external references to service record (applies only to "done" services)
                            type: array
                            items:
                              type: object
                          issueDetail:
                            description: detailed issue description
                            type: object
                            properties:
                              action:
                                type: string
                                description: action (needs to be) taken on a particular item, e.g. inspect, replace, rotate, etc...
                              item:
                                type: string
                                description: the item in question for this issue, e.g. Air Filter, Tires, etc...
                              description:
                                type: string
                                description: description of work that was or has to be done
              # $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/car/{carId}/service":
    x-swagger-router-controller: service
    post:
      description: Create new issue assiciated with car
      operationId: createService
      tags:
        - Archive
      parameters:
        - name: carId
          description: Pitsop car identifier
          in: path
          required: true
          type: number
        - name: service
          description: Object containing issues to be created
          in: body
          required: true
          schema:
            properties:
              meta:
                description: "Object containing additional options to control behavior. Only one option supported for now: meta.sendNotification (boolean). If true then a push notification will be sent to user upon issue creation, if false (default) then will not."
                type: object
              data:
                type: array
                items:
                  type: object
            required:
              - data
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/car/{carId}/update-engine-light-status":
    x-swagger-router-controller: geotabIssue
    post:
      description: Create new issue associated with car
      operationId: v1.createEngineLightStatus
      tags:
        - Archive
      parameters:
        - name: carId
          description: Pitstop car identifier
          in: path
          required: true
          type: number
        - name: body
          description: description body
          in: body
          required: true
          schema:
            properties:
              engineLightObjectArray:
                type: array
                items:
                  type: object
                  properties:
                    source:
                      type: string
                    vin:
                      type: string
                    device_id:
                      type: string
                    event_timestamp:
                      type: string
                    payload:
                      type: object
                      properties:
                        timestamp:
                          type: string
                        faultState:
                          type: string
                        redStopLamp:
                          type: boolean
                        malfunctionLamp:
                          type: boolean
                        protectWarningLamp:
                          type: boolean
                        amberWarningLamp:
                          type: boolean
                        generalVehicleWarningLight:
                          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/car/{carId}/service":
    x-swagger-router-controller: geotabIssue
    post:
      description: Create new issue associated with car
      operationId: v1.createService
      tags:
        - Archive
      parameters:
        - name: carId
          description: Pitstop car identifier
          in: path
          required: true
          type: number
        - name: body
          description: description body
          in: body
          required: true
          schema:
            properties:
              serviceObjectArray:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                    triggeredAt:
                      type: string
                    spnFmiCode:
                      type: string
                    spnSourceAddressCode:
                      type: string
                    milStatus:
                      type: number
                    spnSourceAddressString:
                      type: string
                    faultState:
                      type: string
                    externalDescription:
                      type: object
                      properties:
                        source:
                          type: string
                        value:
                          type: string
              serviceType:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/car/{carId}/appointments":
    x-swagger-router-controller: appointment
    get:
      description: get service appointment of the car
      operationId: getCarAppointmentByParam
      tags:
        - Car
      parameters:
        - name: carId
          in: path
          description: id of the car
          required: true
          type: number
        - name: state
          in: query
          description: state of the appointment (tentative or requested)
          required: false
          type: string
        - name: from
          in: query
          description: from date
          required: false
          type: string
        - name: to
          in: query
          description: to date
          required: false
          type: string
        - name: order
          in: query
          description: order of the appointment date
          required: false
          type: string
        - name: isArchived
          in: query
          description: Is this record archived. If not provided, both type will be returned.
          required: false
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetCarAppointmentSuccessfulSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/appointment":
    x-swagger-router-controller: appointment
    post:
      description: create an appointment for an user
      operationId: v1.createAppointment
      tags:
        - Appointment
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
        - name: request
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              carId:
                type: number
              comments:
                type: string
              appointmentDetails:
                type: object
                properties:
                  state:
                    type: string
                  startTime:
                    type: string
                    description: appointment start time
                  endTime:
                    type: string
                    description: appointment end time
                  timezone:
                    type: string
                    description: appointment time zone
                required:
                  - state
                  - startTime
                  - endTime
            required:
              - carId
              - userId
              - appointmentDetails
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shops/{shopId}/statuses":
    x-swagger-router-controller: statuses
    get:
      description: get shop statuses
      operationId: v1.getShopStatuses
      tags:
        - Statuses
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetShopAppointmentSuccessfulSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update a shop car status list
      operationId: v1.updateShopCarStatusList
      tags:
        - Statuses
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
        - name: request
          in: body
          required: true
          schema:
            properties:
              statuses:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      description: status key
                      type: string
                    description:
                      description: status description
                      type: string
                    color:
                      description: status color
                      type: string
            required:
              - statuses
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/appointment/send-report-to-contact":
    x-swagger-router-controller: appointment
    post:
      description: Send email to shop contact/vendor containing a car health report
      operationId: v1.sendReportToContact
      tags:
        - Appointment
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              contactId:
                type: number
              carId:
                type: number
              shopId:
                type: number
              comments:
                type: string
            required:
              - contactId
              - carId
              - shopId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/appointment/{appointmentId}/notify-shop":
    x-swagger-router-controller: appointment
    post:
      description: Send email to shop containing car services
      operationId: v1.sendEmailToShop
      tags:
        - Appointment
      parameters:
        - name: appointmentId
          in: path
          description: id of the appointment
          required: true
          type: number
        - name: request
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
              name:
                type: string
            required:
              - email
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/appointment/{appointmentId}/notify-contact":
    x-swagger-router-controller: appointment
    post:
      description: Send email to shop contact with/without attachReport
      operationId: v1.sendEmailToShopContact
      tags:
        - Appointment
      parameters:
        - name: appointmentId
          in: path
          description: id of the appointment
          required: true
          type: number
        - name: request
          in: body
          required: true
          schema:
            properties:
              contactId:
                type: number
              attachReport:
                type: boolean
            required:
              - contactId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shop/{shopId}/appointments":
    x-swagger-router-controller: appointment
    get:
      description: get service appointment to a shop
      operationId: getShopAppointmentByParam
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
        - name: state
          in: query
          description: state of the appointment (tentative or requested)
          required: false
          type: string
        - name: from
          in: query
          description: from date
          required: false
          type: string
        - name: to
          in: query
          description: to date
          required: false
          type: string
        - name: order
          in: query
          description: order of the appointment date
          required: false
          type: string
        - name: isArchived
          in: query
          description: Is this record archived. If not provided, both type will be returned.
          required: false
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetShopAppointmentSuccessfulSchema"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create an appointment for an user and send a text message or email
      operationId: createAppointmentAndSendMessage
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          description: id of the shop
          required: true
          type: number
        - name: request
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              carId:
                type: number
              comments:
                type: string
              phoneNumber:
                type: number
              existingUser:
                type: boolean
              appointmentDetails:
                type: object
                properties:
                  state:
                    type: string
                  appointmentDate:
                    type: string
                    description: ISO date time format. Defaults to current time and date.
                required:
                  - state
                  - appointmentDate
            required:
              - carId
              - userId
              - appointmentDetails
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shop/{shopId}/activeVehicles":
    x-swagger-router-controller: activeVehicles
    get:
      description: Get car by property
      operationId: v1.getFleetActiveVehicles
      tags:
        - Car
      parameters:
        - name: shopId
          required: true
          in: path
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            type: object
            properties:
              Active:
                type: number
                description: number of active vehicles in fleet
              Inactive:
                type: number
                description: number of inactive vehicles in fleet
              Disconnected:
                type: number
                description: number of disconnected vehicles in fleet
              No Device:
                type: number
                description: number of vehicles in fleet without a device attached
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/shop/{shopId}/pm-counts":
    x-swagger-router-controller: car
    get:
      description: Get counts of preventive maintenance tasks that are overdue and due soon for a shop.
      operationId: v1.getShopPmCounts
      tags:
        - Car
      parameters:
        - name: shopId
          type: number
          in: path
          required: true
          description: The ID of the shop.

        - name: trailers
          type: boolean
          in: query
          required: false
          description: bool flag true for trailers
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: PM counts for the shop
                type: object
                properties:
                  overdue_count:
                    type: integer
                    description: Count of overdue PM tasks
                  due_soon_count:
                    type: integer
                    description: Count of PM tasks that are due soon
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/startOnBoardCalamp":
    x-swagger-router-controller: calamp
    post:
      description: Onboard a shop with Calamp.
      operationId: v1.startOnBoardCalamp
      tags:
        - Shop
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            required:
              - shopName
              - shopEmail
              - user
              - password
              - apiKey
            properties:
              shopName:
                type: string
                description: Name of the shop to onboard.
              shopEmail:
                type: string
                description: Email of the shop to onboard.
              user:
                type: string
                description: Username for Calamp.
              password:
                type: string
                description: Password Key for Calamp.
              apiKey:
                type: string
                description: Api Key for Calamp.
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              status:
                type: string
                description: Status of the onboarding process.
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/startOnBoardOmnitracs":
      x-swagger-router-controller: v1/omnitracs
      post:
        description: Onboard a shop with Omnitracs.
        operationId: startOnBoardOmnitracs
        tags:
          - Shop
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            required: true
            schema:
              required:
                - shopName
                - shopEmail
                - user
                - password
              properties:
                shopName:
                  type: string
                  description: Name of the shop to onboard.
                shopEmail:
                  type: string
                  description: Email of the shop to onboard.
                user:
                  type: string
                  description: Username for Omnitracs.
                password:
                  type: string
                  description: Password Key for Omnitracs.

        responses:
          "200":
            description: "Success"
            schema:
              properties:
                status:
                  type: string
                  description: Status of the onboarding process.
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  "/v1/getIntegrations":
      x-swagger-router-controller: v1/omnitracs
      get:
        description: Get integrations details by integration name.
        operationId: getIntegrations
        tags:
          - Shop
        consumes:
          - application/json
        parameters:
          - in: body
            name: body
            required: true
            schema:
              required:
                - integrationName
              properties:
                integrationName:
                  type: string
                  description: Name (Table name) of the integration to get details.

        responses:
          "200":
            description: "Success"
            schema:
              properties:
                status:
                  type: string
                  description: Details of integration.
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  "/v1/public/getNotes":
    x-swagger-router-controller: v1/public-api
    get:
      description: Get Vehicle Notes By Shop Name
      operationId: getVehiclesNotes
      tags:
        - Shop
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            required:
              - shopName
              - offset
              - limit
            properties:
              shopName:
                type: string
                description: To get the notes by shop name.
              offset:
                type: number
                description: offset of page
              limit:
                type: number
                description: limit notes items.

      responses:
        "200":
          description: "Success"
          schema:
            properties:
              status:
                type: string
                description: Details of integration.
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shop/{shopId}/segmentFleet":
    x-swagger-router-controller: segmentFleet
    post:
      description: Create a new fleet with with vehicles from current shop.
      operationId: v1.segmentFleet
      tags:
        - Shop
      parameters:
        - in: path
          name: shopId
          description: id of the shop
          required: true
          type: number
        - in: body
          name: request
          required: true
          schema:
            properties:
              newFleetName:
                type: string
              newFleetEmail:
                type: string
              carIds:
                type: array
                items:
                  type: number
              userIds:
                type: array
                items:
                  type: number
              removeCarsFromOriginalShop:
                type: boolean
            required:
              - carIds
              - newFleetName
              - newFleetEmail
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shop/{shopId}":
    x-swagger-router-controller: shop
    get:
      description: Returns shop to the caller
      operationId: getShopById
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: updates shop
      operationId: updateShop
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          required: true
          type: number
        - name: shop
          in: body
          required: true
          schema:
            properties:
              name:
                type: string
              phone:
                type: string
              validatePhone:
                type: boolean
              email:
                type: string
              address:
                type: string
              userId:
                type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shop/{shopId}/settings":
    x-swagger-router-controller: shop
    get:
      description: get shop settings
      operationId: getShopSettings
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: insert or update shop settings
      operationId: upsertShopSettings
      tags:
        - Archive
      parameters:
        - name: shopId
          in: path
          required: true
          type: number
        - name: payload
          in: body
          required: true
          schema:
            properties:
              settings:
                type: object
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/analytics":
    x-swagger-router-controller: utilities
    get:
      description: returns various analytics from mixpanel based on tracked events
      operationId: getAnalytics
      tags:
        - Archive
      parameters:
        - name: event
          description: "Array of tracked event labels: {scanCar | requestService | sendChat}"
          in: query
          type: array
          items:
            type: string
          required: false
        - name: from_date
          in: query
          type: string
          required: false
        - name: to_date
          in: query
          type: string
          required: false
        - name: userId
          description: filter by pitstop userId(s)
          in: query
          type: array
          items:
            type: number
        - name: shopId
          description: filter by pitstop shopId(s)
          in: query
          type: array
          items:
            type: number
        - name: carMake
          description: filter by car make
          in: query
          type: array
          items:
            type: string
        - name: carModel
          description: filter by car model
          in: query
          type: array
          items:
            type: string
        - name: carYear
          description: "filter by car year (mutually exclusive with either `carYearFrom` and/or `carYearTo`)"
          in: query
          type: array
          items:
            type: number
        - name: carYearFrom
          description: "filter events with car year greater equal to `carYearFrom`"
          in: query
          type: number
        - name: carYearTo
          description: "filter events with car year lesser equal to `carYearTo`"
          in: query
          type: number
        - name: email
          description: "filter events with to contain property with this email"
          in: query
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/emailScheduler":
    x-swagger-router-controller: emailScheduler
    get:
      description: returns the email configuration for a specific shop.
      operationId: v1.getEmailConfigurations
      tags:
        - Archive
      parameters:
        - name: shopId
          description: shop id number
          in: query
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Upsert email schedule configuration
      operationId: v1.upsertEmailConfiguration
      tags:
        - Archive
      parameters:
        - name: configurationId
          in: query
          type: number
          required: true
        - name: emailParams
          in: body
          required: true
          schema:
            properties:
              id_shop:
                type: number
              is_enabled:
                type: boolean
              send_next_email_at:
                type: string
              timezone:
                type: string
              email_report_type:
                type: string
              emails:
                type: array
                items:
                  type: object
                  properties:
                    email:
                      description: email of recipient
                      type: string
                    name:
                      description: name of recipient
                      type: string
              configuration:
                type: object
                properties:
                  subscribeTo:
                    type: array
                    items:
                      type: number
            required:
              - id_shop
              - emails
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/CarShop"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: deletes the email configuration with a specific email configuration id.
      operationId: v1.deleteEmailConfiguration
      tags:
        - Archive
      parameters:
        - name: configurationId
          description: email configuration id number
          in: query
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/summary":
    x-swagger-router-controller: utilities
    get:
      description: get summary for the shop(s)
      operationId: getSummaryByShop
      tags:
        - Summary Report
      parameters:
        - name: shopId
          in: query
          description: shop id of car
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/shop/{shopId}/calendar":
    x-swagger-router-controller: shop
    get:
      description: Returns unavailable dates for an service appointment on the calendar
      operationId: getBookedAppointments
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true
          type: number
        - name: from
          in: query
          description: ISO format timestamp string, defaults to 6 months from current date and time
          required: false
          type: string
        - name: to
          in: query
          description: ISO format timestamp string, defaults to current date and time
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  #   '/installation':
  #       x-swagger-router-controller: installation
  #       post:
  #         description: create new installation record
  #         operationId: createInstallation
  #         parameters:
  #             - name: installation
  #               in: body
  #               required: true
  #               schema:
  #                 properties:
  #                   updatedAt:
  #                     type: string
  #                   deviceToken:
  #                     type: string
  #                   pushType:
  #                     type: string
  #                   deviceType:
  #                     type: string
  #                   objectId:
  #                     type: string
  #                   createdAt:
  #                     type: string
  #                   localeIdentifier:
  #                     type: string
  #                   GCMSenderId:
  #                     type: string
  #                   badge:
  #                     type: number
  #                   parseVersion:
  #                     type: string
  #                   userId:
  #                     type: number
  #                   appIdentifier:
  #                     type: string
  #                   appName:
  #                     type: string
  #                   channels:
  #                     type: string
  #                   appVersion:
  #                     type: string
  #                   timeZone:
  #                     type: string
  #                 required:
  # #                  - appIdentifier
  # #                  - appName
  # #                  - updatedAt
  #                   - deviceType
  #                   - objectId
  #                   - deviceToken
  #                   - pushType
  #                   - appVersion
  # #                  - timeZone
  # #                  - createdAt
  #         responses:
  #             "200":
  #               description: Success
  #               schema:
  #                 $ref: "#/definitions/HelloWorldResponse"
  #             default:
  #               description: Error
  #               schema:
  #                 $ref: "#/definitions/ErrorResponse"
  "/utility/sendSMS":
    x-swagger-router-controller: utilities
    post:
      description: send text message
      operationId: sendSms
      tags:
        - Utility
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              carId:
                type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/serviceRequest":
    x-swagger-router-controller: utilities
    post:
      description: send service request email, only carId is required.
      operationId: sendServiceRequest
      tags:
        - Archive
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              userId:
                type: number
              carId:
                type: number
              shopId:
                type: number
              comments:
                type: string
              options:
                type: object
                properties:
                  state:
                    type: string
                  appointmentDate:
                    type: string
                    description: ISO date time format. Defaults to current time and date.
            required:
              - carId
              #- shopId
              #- userId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update appoint date & time. Allowed appointment status are 'reminder', 'requested', 'confirmed', 'cancelled', 'completed'
      operationId: updateServiceRequest
      tags:
        - Archive
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              appointmentDate:
                type: string
                description: ISO date time format. Has to be in future.
              state:
                type: string
                description: State to be updated.
              appointmentId:
                type: number
                description: Appointment ID to be updated
            required:
              - appointmentId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete the appointment
      operationId: deleteServiceRequest
      tags:
        - Archive
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              appointmentId:
                type: number
                description: Appointment ID to be updated
            required:
              - appointmentId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/smooch":
    x-swagger-router-controller: utilities
    post:
      description: send smooch to respective dealership email
      operationId: sendSmoochEmail
      tags:
        - Archive
      parameters:
        - name: request
          in: body
          required: true
          schema:
            properties:
              appUser:
                type: object
              messages:
                type: array
                items:
                  type: string
            required:
              - appUser
              - messages
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/pushService":
    x-swagger-router-controller: utilities
    post:
      description: send push message to devices
      operationId: sendPushNotification
      tags:
        - Archive
      parameters:
        - name: pushRequest
          in: body
          required: true
          schema:
            properties:
              recepients:
                type: array
                items:
                  type: integer
              type:
                type: string
              message:
                type: object
                properties:
                  title:
                    type: string
                  content:
                    type: string
                  data:
                    type: object
            required:
              - recepients
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/webhook/smooch/app-user-message":
    x-swagger-router-controller: utilities
    post:
      description: "Smooch app-user-message webhook handling"
      operationId: smoochAppUserMsgWebhook
      tags:
        - Utility
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              trigger:
                type: string
              app:
                type: object
                properties:
                  _id:
                    type: string
                required:
                  - _id
              appUser:
                type: object
                properties:
                  _id:
                    type: string
                required:
                  - _id
            required:
              - trigger
              - app
              - appUser
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/webhook/smooch/app-user-read-message":
    x-swagger-router-controller: utilities
    post:
      description: "Smooch app-user-message webhook handling"
      operationId: smoochAppUserMsgReadWebhook
      tags:
        - Utility
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              trigger:
                type: string
              app:
                type: object
                properties:
                  _id:
                    type: string
                required:
                  - _id
              appUser:
                type: object
                properties:
                  _id:
                    type: string
                  userId:
                    type: string
                required:
                  - _id
                  - userId
            required:
              - trigger
              - app
              - appUser
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/utility/pushServiceSmooch":
    x-swagger-router-controller: utilities
    post:
      description: send smooch push message to devices using
      operationId: sendPushRequestSmooch
      tags:
        - Archive
      parameters:
        - name: pushRequest
          in: body
          required: true
          schema:
            properties:
              recepients:
                type: array # multiple recepients
                items:
                  type: string # identified by their email addresses
                  ### looks like we don't need type here.
                  #type:
                  #  type: string
              message:
                type: object # same message for all recepients
                properties:
                  title:
                    type: string
                  content:
                    type: string
            required:
              - recepients
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scanner/{scannerId}":
    x-swagger-router-controller: scanner
    get:
      description: "Returns all scanners in `scanner` table matching `scannerId` and query parameters"
      operationId: getScanners
      tags:
        - Scan
      parameters:
        - name: scannerId
          in: path
          required: true
          type: string
        - name: scannerName
          in: query
          required: false
          type: string
        - name: active
          in: query
          required: false
          type: boolean
        - name: shopId
          in: query
          required: false
          type: number
        - name: shopIdDefault
          in: query
          required: false
          type: number
        - name: carId
          description: "Mutually exclusive with vin"
          in: query
          required: false
          type: number
        - name: vin
          description: "Mutually exclusive with carId"
          in: query
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scanner":
    x-swagger-router-controller: scanner
    get:
      description: get scanner by given query
      operationId: getScannerByScannerParams
      tags:
        - Scan
      parameters:
        - name: scannerId
          in: query
          required: false
          type: string
        - name: active
          in: query
          required: true
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: "Add new scanners to db with specific shop association"
      operationId: createScanner
      tags:
        - Archive
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              shopId:
                type: number
              scanners:
                type: array
                items:
                  type: string
            required:
              - scanners
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: UPSERT scanner in db
      operationId: updateScanner
      tags:
        - Archive
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              carId:
                type: number
              scannerId:
                type: string
                description: id set by factory
              scannerName:
                type: string
                description: name given to scanner
              isActive:
                type: boolean
            required:
              - carId
              - isActive
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/demo/cars/{shopId}":
    x-swagger-router-controller: demo
    post:
      description: assign demo cars to shop
      operationId: v1.assignDemoCar
      tags:
        - demo
      parameters:
        - name: shopId
          in: path
          description: shopId
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: unassign demo cars from shop
      operationId: v1.unassignDemoCar
      tags:
        - demo
      parameters:
        - name: shopId
          in: path
          description: shopId
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/demo/emissions/pid":
    x-swagger-router-controller: scan
    post:
      description: decode the 2141 pid and return values
      operationId: demoEmissionPid
      tags:
        - Archive
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              data:
                type: string
                description: 2141 datapoint
            required:
              - data
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/device-clock-sync":
    x-swagger-router-controller: scan
    post:
      description: create a single reference point for scanner rtc-time synchronization
      operationId: createRtcRefSync
      tags:
        - Scan
      parameters:
        - name: data
          in: body
          schema:
            properties:
              deviceId:
                description: Device Id
                type: string
              deviceType:
                description: Device Type
                type: string
              vin:
                description: Vehicle identification number
                type: string
              rtcTime:
                description: Obd device internal clock time at the moment of sampling
                type: integer
              utcTime:
                description: World-time reference in ISO-8601 format with time-zone; if not given will default to server time at the moment of requet processing
                type: string
            required:
              - deviceId
              - deviceType
              - rtcTime
              - vin
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Mapping"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/sensordata/count":
    x-swagger-router-controller: scan
    get:
      description: count sensorData present in a month
      operationId: countSensorDataFromBigQuery
      tags:
        - Archive
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: true
          type: string
        - name: startDate
          in: query
          description: month for which sensorData needs to be counted
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/sensordata/latest":
    x-swagger-router-controller: scan
    get:
      description: Fetch the most recent data for the vin limit 4k
      operationId: getLatestDataFromGBQ
      tags:
        - Scan
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/pids/download":
    x-swagger-router-controller: scan
    get:
      description: download pids
      operationId: downloadPids
      tags:
        - Scan
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: false
          type: string
        - name: from
          in: query
          description: from_date
          required: false
          type: string
        - name: to
          in: query
          description: to_date
          required: false
          type: string
        - name: limit
          in: query
          description: limit
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
        - name: orderedBy
          in: query
          description: order column
          required: false
          type: string
        - name: orderDirection
          in: query
          description: either "asc" or "desc"
          required: false
          type: string
        - name: includePitstopMetaData
          in: query
          description: returns pitstop meta data such as deviceTimestamp, deviceId, etc if set to true
          type: boolean
          required: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/pids/gmrv/download/":
    x-swagger-router-controller: scan
    get:
      description: download pids for GMRV only using numberic values
      operationId: downloadPidsGMRVFormat
      tags:
        - Scan
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: false
          type: string
        - name: from
          in: query
          description: from_date
          required: false
          type: string
        - name: to
          in: query
          description: to_date
          required: false
          type: string
        - name: limit
          in: query
          description: limit
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
        - name: orderedBy
          in: query
          description: order column
          required: false
          type: string
        - name: orderDirection
          in: query
          description: either "asc" or "desc"
          required: false
          type: string
        - name: sampleSize
          in: query
          description: sample size for getting sensor data
          required: false
          type: integer
        - name: allowedNull
          in: query
          description: if the pid get null data
          required: false
          type: boolean
        - name: excludeValues
          in: query
          description: Columns to be excluded from the csv file
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/aggregate":
    x-swagger-router-controller: aggregate
    get:
      description: get aggregate table data
      operationId: getAggregateTable
      tags:
        - Scan
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: false
          type: string
        - name: from
          in: query
          description: from_date
          required: false
          type: string
        - name: to
          in: query
          description: to_date
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/pids":
    x-swagger-router-controller: scan
    post:
      description: save pids; this endpoint will soon be deprecated in favor of a simpler endpoint with more flexible options and more predictable behaviour.Trip id is 4 bytes integer.
      operationId: savePids
      tags:
        - Archive
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              tripId:
                type: integer
              scannerId:
                type: string
              pidArray:
                type: array
                items:
                  type: object
                  properties:
                    dataNum:
                      description: deprecated
                      type: string
                    deviceType:
                      description: type of device used to generate the data, e.g., phoneGPS, scanner. If not given will be mined from `deviceId` and if that's not given will be mined from scannerId
                      type: string
                    deviceId:
                      description: device serial number e.g. 215BXXXXXX
                      type: string
                    tripMileage:
                      description: This is the obd device internal odometer. For 215B devices the value is the total distance traveled since device is connected to a car; for 212B devices the value is the total distance travelled since beginning of the current trip
                      type: number
                    calculatedMileage:
                      description: deprecated
                      type: number
                    rtcTime:
                      description: device internal clock timestamp in unix time seconds
                      type: number
                    pids:
                      type: array
                      items:
                        type: object
                      properties:
                        id:
                          description: string identifier for the data
                          type: string
                        data:
                          description: sensor data value
                          type: string
                        geolocation:
                          type: object
                          description: The geolocation (longitude, lattitude, and altitude) of the car when this data is being posted
                          properties:
                            long:
                              type: string
                            lat:
                              type: string
                            alt:
                              type: string
            required:
              - tripId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: get pids
      operationId: getPids
      tags:
        - Scan
      parameters:
        - name: vin
          in: query
          description: VIN of car
          required: false
          type: string
        - name: from
          in: query
          description: from_date
          required: false
          type: string
        - name: to
          in: query
          description: to_date
          required: false
          type: string
        - name: limit
          in: query
          description: limit
          required: false
          type: integer
        - name: offset
          in: query
          description: offset
          required: false
          type: integer
        - name: orderedBy
          in: query
          description: order column
          required: false
          type: string
        - name: orderDirection
          in: query
          description: either "asc" or "desc"
          required: false
          type: string
        - name: sampleSize
          in: query
          description: sample size for getting sensor data
          required: false
          type: integer
        - name: allowedNull
          in: query
          description: if the pid get null data
          required: false
          type: boolean
        - name: excludeValues
          in: query
          description: Columns to be excluded from pids
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/pids/aisin":
    x-swagger-router-controller: scan
    get:
      description: get only aisin data
      operationId: getAisinData
      tags:
        - scan
      parameters:
        - name: startTime
          in: query
          required: false
          type: string
        - name: endTime
          in: query
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/pids/freeze":
    x-swagger-router-controller: scan
    post:
      description: save freezePids
      operationId: saveFreezePids
      tags:
        - Archive
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              scannerId:
                type: string
              freezePidArray:
                type: array
                items:
                  type: object
                  properties:
                    rtcTime:
                      type: number
                    pids:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          data:
                            type: string
            required:
              - scannerId
              - freezePidArray
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/trip/{tripId}":
    x-swagger-router-controller: scan
    get:
      description: get trip by tripId. Trip id is 4 bytes integer. Details https://goo.gl/rRSJk5
      operationId: getTripById
      tags:
        - Archive
      parameters:
        - name: tripId
          in: path
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/trip":
    x-swagger-router-controller: scan
    get:
      description: get trip by query string. Details at https://goo.gl/rRSJk5
      operationId: getTripByQuery
      tags:
        - Archive
      parameters:
        - name: vin
          in: query
          required: false
          type: string
        - name: scannerId
          in: query
          required: false
          type: string
        - name: latest
          in: query
          description: whether the server should return the latest trip
          required: false
          type: boolean
        - name: active
          in: query
          description: whether the server should return the active trip
          required: false
          type: boolean
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create trip. Trip id is 4 bytes integer.
      operationId: createTrip
      tags:
        - Scan
      parameters:
        - name: params
          in: body
          required: true
          schema:
            properties:
              scannerId:
                type: string
              tripIdRaw:
                type: string
              rtcTimeStart:
                type: integer
              mileageStart:
                description: Cummulative mileage from base_mileage for the car at the start of this trip
                type: number
              deviceType:
                type: string
              deviceId:
                type: string
              vin:
                type: string
              locationStart:
                type: object
                description: JSON containing geolocation data when the trip starts. The JSON will contain a longtitude and a latitude.
                properties:
                  long:
                    type: string
                  lat:
                    type: string
                  alt:
                    type: string
                  address:
                    type: string
            required:
              - rtcTimeStart
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update trip.Trip id is 4 bytes integer.
      operationId: updateTrip
      tags:
        - Scan
      parameters:
        - name: params
          in: body
          required: true
          schema:
            properties:
              tripId:
                type: integer
              mileage:
                type: number
              rtcTimeEnd:
                type: integer
              mileageStart:
                type: number
              locationEnd:
                type: object
                description: JSON containing geolocation data when the trip starts. The JSON will contain a longtitude and a latitude.
                properties:
                  long:
                    type: string
                  lat:
                    type: string
                  alt:
                    type: string
                  address:
                    type: string
            required:
              - tripId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/report":
    x-swagger-router-controller: "scan"
    get:
      description: get all scan reports
      operationId: getScanReport
      tags:
        - Archive
      parameters:
        - name: carId
          description: carId needed to get scan reports for this car
          in: query
          type: number
          required: true
        - name: rtcTime
          description: rtcTime (UNIX TIME) for which record is requested
          in: query
          type: number
          required: false
        - name: reportId
          description: The report id refers to the primary key of the scan_report table. Cannot be used in conjunction with rtc time or carId
          in: query
          type: number
          required: false
        - name: from
          description: The beginning of a period in RTC Time (UNIX Time) where reports are to be returned. By default starts from beginning.
          in: query
          type: number
          required: false
        - name: to
          description: The end of a period in RTC Time (UNIX Time) where reports are to be returned. By default it ends with the last scan.
          in: query
          type: number
          required: false
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create scan report
      operationId: createScanReport
      tags:
        - Scan
      parameters:
        - name: data
          in: body
          required: true
          schema:
            properties:
              carId:
                type: number
                description: Id column in car table.
              rtcTime:
                type: number
                description: The UNIX timestamp when the pid is being recorded.
            required:
              - carId
              - rtcTime
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/scan/report/{scanReportId}":
    x-swagger-router-controller: "scan"
    delete:
      description: soft delete scan report by dessociating the carId from the report
      operationId: deleteScanReportByCarId
      tags:
        - Archive
      parameters:
        - name: scanReportId
          in: path
          description: Id (primary key) of the scan report in scan_report table
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/trip/{tripId}/attachments":
    x-swagger-router-controller: fileAttachments
    get:
      description: download zip files from an S3 bucket
      operationId: getAllFilesPresentPerTrip
      tags:
        - downloadFile
      parameters:
        - in: path
          name: tripId
          description: id of trip
          type: number
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: upload zip file to S3 bucket
      operationId: uploadFile
      tags:
        - uploadFile
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: singleInputFileName
          description: image file to be uploaded
          type: file
          required: false
        - in: path
          name: tripId
          description: ID for a trip
          type: number
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/attachments":
    x-swagger-router-controller: fileAttachments
    get:
      description: download zip files from an S3 bucket
      operationId: downloadFile
      tags:
        - downloadFile
      parameters:
        - in: query
          name: filename
          description: name of file to download
          type: string
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/{carId}/serviceHistory":
    x-swagger-router-controller: serviceHistory
    post:
      description: upload csv service history file to S3 bucket
      operationId: v1.uploadServiceHistory
      tags:
        - uploadFile
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: singleInputFileName
          description: image file to be uploaded
          type: file
          required: false
        - in: formData
          name: whichFormatter
          type: string
          description: specify the formatter to use for the file
          required: false
        - in: formData
          name: odoUnits
          type: string
          description: specify the odometer units to be used. Can be k for km or m for miles
          required: false
        - in: formData
          name: dateFormat
          type: string
          description: specify the date format to be used. Default is MM/DD/YYYY
          required: false
        - in: path
          name: carId
          description: id of car
          type: number
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    # post:
    #   description: upload zip file to S3 bucket
    #   operationId: uploadFile
    #   tags:
    #     - uploadFile
    #   consumes:
    #     - multipart/form-data
    #   parameters:
    #     - in: formData
    #       name: singleInputFileName
    #       description: image file to be uploaded
    #       type: file
    #       required: false
    #     - in: query
    #       name: tripId
    #       description: ID for a trip
    #       type: number
    #       required: false
    #   responses:
    #     "200":
    #       description: Success
    #       schema:
    #         $ref: "#/definitions/HelloWorldResponse"
    #     default:
    #       description: Error
    #       schema:
    #         $ref: "#/definitions/ErrorResponse"

  #  '/scan/freezeData':
  #        x-swagger-router-controller: scan
  #        post:
  #          description: save freeze data and issue
  #          operationId: FreezeAndIssue
  #          parameters:
  #            -
  #              name: data
  #              in: body
  #              required: true
  #              schema:
  #                properties:
  #                  scannerId:
  #                    type: string
  #                  serviceType:
  #                    type: string
  #                  data:
  #                    type: object
  #                required:
  #                  - scannerId
  #                  - serviceType
  #                  - data
  #          responses:
  #              "200":
  #                description: Success
  #                schema:
  #                  $ref: "#/definitions/HelloWorldResponse"
  #              default:
  #                description: Error
  #                schema:
  #                  $ref: "#/definitions/ErrorResponse"
  "/utility/webhook/sendgrid/trackEvents":
    x-swagger-router-controller: utilities
    post:
      description: endpoint to receive events from sendgrid, an array of events is sent either every 30s or when the size is 768k
      operationId: trackSendgridEvents
      tags:
        - Utility
      parameters:
        - name: body
          in: body
          required: true
          description: an array of sendgrid events
          schema:
            type: array
            items:
              type: object
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/internalServ":
    x-swagger-router-controller: internalServices
    post:
      description: endpoint for accessing inernal services
      operationId: internalServiceExec
      tags:
        - Archive
      parameters:
        - name: body
          in: body
          required: true
          description: request body
          schema:
            properties:
              meta:
                type: object
              data:
                type: object
            required:
              - meta
              - data
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/example":
    x-swagger-router-controller: exampleController
    get:
      description: endpoint to trigger example operationId, input user id and get email in response
      operationId: exampleOperation
      tags:
        - Archive
      parameters:
        - name: userId
          in: query
          description: "valid user id"
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/dashboard/v1/customers":
    x-swagger-router-controller: dashboard
    get:
      description: Get list of car with the owner information and issues on the car
      operationId: dashboard.v1.getCustomerTable
      tags:
        - dashboard
      parameters:
        - name: shopId
          in: query
          required: false
          description: Unique shop identifier
          type: number
        - name: userId
          in: query
          description: Unique user identifier
          required: false
          type: number
        - name: firstName
          type: string
          in: query
          description: First Name of the car owner
          required: false
        - name: lastName
          type: string
          in: query
          description: Last Name of the car owner
          required: false
        - name: email
          type: string
          in: query
          description: email of the car owner
          required: false
        - name: vin
          type: string
          in: query
          description: Vehicle Identification Number
          required: false
        - name: make
          in: query
          description: Make
          required: false
          type: string
        - name: model
          in: query
          description: Model
          required: false
          type: string
        - name: year
          type: string
          in: query
          description: Vehicle year
          required: false
        - name: mileage
          type: number
          in: query
          description: Mileage of the car
          required: false
        - name: directions
          in: query
          description: Direction to be sorted. Only accepts ASC and DESC. Defaults to ASC. The number of dir provided must be equal to the number of col provided in the query.
          required: false
          type: array
          items:
            type: string
            enum: ["ASC", "DESC"]
        - name: limit
          in: query
          description: limit the number of rows
          required: false
          type: number
        - name: offset
          in: query
          description: offset the number of rows
          required: false
          type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                description: List of cars matching the search terms in the request query
                type: array
                items:
                  $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/dashboard/v1/uploadShopImage":
    x-swagger-router-controller: dashboard
    post:
      description: uploads image to s3 bucket and stores the ref url in database
      operationId: dashboard.v1.uploadShopImage
      tags:
        - Archive
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: singleInputFileName
          description: image file to be uploaded
          type: file
          required: false
        - in: query
          name: shopId
          description: ID for a shop
          type: number
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/dashboard/v1/uploadimage":
    x-swagger-router-controller: dashboard
    post:
      description: uploads image to s3 bucks and returns the ref url
      operationId: dashboard.v1.uploadImage
      tags:
        - Archive
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: singleInputFileName
          description: image file to be uploaded
          type: file
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/dashboard/v1/deleteimage":
    x-swagger-router-controller: dashboard
    delete:
      description: deletes an image from s3 bucket
      operationId: dashboard.v1.deleteImage
      tags:
        - Archive
      parameters:
        - in: query
          name: imageUrl
          description: image url to delete
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/users/{userId}/subscriptions":
    x-swagger-router-controller: user
    get:
      description: Get user subscriptions
      operationId: v1.getUserSubscriptions
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: number
          description: id of user
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    post:
      description: Create a user subscription
      operationId: v1.createUserSubscription
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: number
          description: id of user
          required: true
        - name: order
          in: body
          description: order object which contains quantity
          schema:
            properties:
              plan:
                type: string
              quantity:
                type: integer
              token:
                type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: Cancel a user subscription
      operationId: v1.cancelUserSubscriptions
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: number
          description: id of user
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/users/{userId}/payment":
    x-swagger-router-controller: user
    get:
      description: Get user payment details
      operationId: v1.getUserPaymentDetails
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

    post:
      description: Make a user payment
      operationId: v1.makePayment
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: payment
          in: body
          description: payment object
          required: true
          schema:
            properties:
              amount:
                type: integer
                description: total amount to be paid in CAD cents
              token:
                type: string
              currency:
                type: string
              shipping:
                type: object
                properties:
                  address:
                    type: object
                    properties:
                      city:
                        type: string
                      country:
                        type: string
                      line1:
                        type: string
                      line2:
                        type: string
                      postal_code:
                        type: string
                      state:
                        type: string
                  name:
                    type: string
                  phone:
                    type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/users/{userId}/stripe":
    x-swagger-router-controller: user
    get:
      description: Get stripe customer details
      operationId: v1.getStripeCustomerDetails
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/users/{userId}/payments/cards":
    x-swagger-router-controller: user
    post:
      description: add user payment card
      operationId: v1.addCardPayment
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: card
          in: body
          description: card object
          required: true
          schema:
            properties:
              token:
                type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    put:
      description: Update user payment card info
      operationId: v1.updateCardPayment
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: card
          in: body
          description: card payment object
          required: true
          schema:
            properties:
              sourceId:
                type: string
                description: card source id
              data:
                type: object
                properties:
                  name:
                    type: string
                  address_city:
                    type: string
                  address_country:
                    type: string
                  address_line1:
                    type: string
                  address_state:
                    type: string
                  address_zip:
                    type: string
                  exp_month:
                    type: number
                  exp_year:
                    type: number
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/users/{userId}/payments/cards/{cardId}":
    x-swagger-router-controller: user
    put:
      description: Update user default payment card
      operationId: v1.updateDefaultCardPayment
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: cardId
          in: path
          description: card payment id
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: Delete user payment card
      operationId: v1.deleteCardPayment
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: integer
          required: true
        - name: cardId
          in: path
          description: card payment object
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                type: string
                description: success
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "403":
          description: "Invalid access"
          schema:
            $ref: "#/definitions/response403"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"

  "/v1/users/{userId}":
    x-swagger-router-controller: user
    delete:
      description: delete a user
      operationId: v1.deleteUser
      tags:
        - v1
        - User
      parameters:
        - name: userId
          in: path
          type: number
          description: id of user
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/User"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/user/{userId}/car":
    x-swagger-router-controller: user
    put:
      description: update cars related to a user. Details at https://goo.gl/rRSJk5
      operationId: v1.updateUserCars
      tags:
        - User
      parameters:
        - name: userId
          in: path
          type: number
          description: id of user
          required: true
        - name: cars
          in: body
          required: true
          description: list of carIds
          schema:
            properties:
              carIds:
                description: list of carIds to be associated with the user
                type: string
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/User"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/users/{userId}/cars/{carId}":
    x-swagger-router-controller: user
    put:
      description: Assign car to a user
      operationId: v1.assignUserCar
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          description: id of user
          required: true
        - name: carId
          in: path
          type: integer
          description: id of car
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/User"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
    delete:
      description: Unassign a car for a user
      operationId: v1.unassignUserCar
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          description: id of user
          required: true
        - name: carId
          in: path
          type: integer
          description: id of car
          required: true
      responses:
        "200":
          description: "Unassigned car for the user"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/users/{userId}/assign-all-fleet-vehicles":
    x-swagger-router-controller: user
    post:
      description: Assign car to a user
      operationId: v1.assignAllFleetVehicles
      tags:
        - Archive
      parameters:
        - name: userId
          in: path
          type: integer
          description: id of user
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            properties:
              response:
                $ref: "#/definitions/User"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/maintenanceLog":
    x-swagger-router-controller: maintenance
    post:
      description: create a new maintenance log
      operationId: v1.createMaintenanceLog
      tags:
        - Maintenance Log
      parameters:
        - name: data
          in: body
          description: maintenance log data
          required: true
          schema:
            properties:
              shopId:
                type: number
              carIds:
                type: array
                items:
                  type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/routines":
    x-swagger-router-controller: maintenance
    post:
      description: create a new routine service
      operationId: v1.createRoutine
      tags:
        - Routine
      parameters:
        - name: data
          in: body
          description: routine service data
          required: true
          schema:
            properties:
              shopId:
                type: number
              carIds:
                type: array
                items:
                  type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/routines/car/{carId}":
    x-swagger-router-controller: maintenance
    get:
      description: get routines by car id
      operationId: v1.getRoutinesByCarId
      tags:
        - Routine
      parameters:
        - name: carId
          type: integer
          in: path
          required: true
          description: carId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/routines/shop/{shopId}":
    x-swagger-router-controller: maintenance
    get:
      description: get routines by shop id
      operationId: v1.getRoutinesByShopId
      tags:
        - Routine
      parameters:
        - name: shopId
          type: integer
          in: path
          required: true
          description: shopId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/routines/{routineId}":
    x-swagger-router-controller: maintenance
    get:
      description: get routine by id
      operationId: v1.getRoutineById
      tags:
        - Routine
      parameters:
        - name: routineId
          type: integer
          in: path
          required: true
          description: routineId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update a routine service
      operationId: v1.updateRoutine
      tags:
        - Routine
      parameters:
        - name: routineId
          type: integer
          in: path
          required: true
          description: routineId
        - name: data
          in: body
          description: routine service data
          required: true
          schema:
            properties:
              routineId:
                type: number
              carIds:
                type: array
                items:
                  type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/routines/{routineId}/cars":
    x-swagger-router-controller: maintenance
    get:
      description: get all cars by routine id
      operationId: v1.getCarsByRoutineId
      tags:
        - Routine
      parameters:
        - name: routineId
          type: integer
          in: path
          required: true
          description: routineId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/shop/{shopId}/dashboard-usage-report":
    x-swagger-router-controller: dashboardUsageReport
    get:
      description: get dashboard usage report by shop id
      operationId: v1.getDashboarUsageReport
      tags:
        - Google Analytics
      parameters:
        - name: shopId
          type: integer
          in: path
          required: true
          description: shopId of dashboard usage report
        - name: startDate
          type: string
          in: query
          required: true
          description: end date of dashboard usage report
        - name: endDate
          type: string
          in: query
          required: true
          description: end date of dashboard usage report
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/hubspot/contact":
    x-swagger-router-controller: hubspot
    get:
      description: get hubspot contact
      operationId: v1.getHubspotContact
      tags:
        - Hubspot
      parameters:
        - name: email
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create new hubspot contact
      operationId: v1.createHubspotContact
      tags:
        - Hubspot
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
              firstname:
                type: string
              lastname:
                type: string
              company:
                type: string
              phone:
                type: string
              hs_content_membership_notes:
                type: string
              form_name:
                type: string
              where_you_found_pitstop:
                type: string
              samsara_api:
                type: string
              other_integrations:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update hubspot contact
      operationId: v1.updateHubspotContact
      tags:
        - Hubspot
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              contactId:
                type: string
              data:
                type: object
                properties:
                  email:
                    type: string
                  firstname:
                    type: string
                  lastname:
                    type: string
                  company:
                    type: string
                  phone:
                    type: string
                  hs_content_membership_notes:
                    type: string
                  form_name:
                    type: string
                  where_you_found_pitstop:
                    type: string
                  samsara_api:
                    type: string
                  other_integrations:
                    type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/notification/report/shop":
    x-swagger-router-controller: notificationReport
    post:
      description: Post notification report
      operationId: v1.createShopNotificationReport
      tags:
        - Notification Report
      parameters:
        - name: payload
          in: body
          required: false
          schema:
            properties:
              email:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update notification report
      operationId: v1.updateShopNotificationReport
      tags:
        - Notification Report
      parameters:
        - name: payload
          in: body
          required: false
          schema:
            properties:
              email:
                type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: Get notification report
      operationId: v1.getShopNotificationReport
      tags:
        - Notification Report
      parameters:
        - name: shopId
          in: query
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/notification/work-order/shop":
    x-swagger-router-controller: notificationReport
    get:
      description: Get work order notification config by shop
      operationId: v1.getShopWorkOrderNotificationConfig
      tags:
        - Work Order
      parameters:
        - name: shopId
          in: query
          required: true
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update work order notification config by shop
      operationId: v1.updateShopWorkOrderNotificationConfig
      tags:
        - Work Order
      parameters:
        - name: shopId
          in: query
          required: true
          type: number
        - name: payload
          in: body
          required: false
          schema:
            properties:
              patchedConfiguration:
                type: array
                items:
                  type: object
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order":
    x-swagger-router-controller: workOrder
    post:
      description: Create a Work Order
      operationId: v1.createWorkOrder
      tags:
        - Work Order
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: List Work Orders
      operationId: v1.listWorkOrder
      tags:
        - Work Order
      parameters:
        - name: id_shop
          type: integer
          in: query
          required: true
          description: id_shop
        - name: sort
          type: string
          in: query
          required: false
          description: sorting key
        - name: search
          type: string
          in: query
          required: false
          description: search string
        - name: status
          type: string
          in: query
          required: false
          description: wo status
        - name: assignedTo
          type: string
          in: query
          required: false
          description: assigned to
        - name: carIds
          type: string
          in: query
          required: false
          description: car ids to filter
        - name: limit
          type: number
          in: query
          required: false
          description: query limit
        - name: offset
          type: number
          in: query
          required: false
          description: query offset
        - name: vendor
          type: string
          in: query
          required: false
          description: vendor
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/full":
    x-swagger-router-controller: workOrder
    post:
      description: Create a Full Work Order
      operationId: v1.createWorkOrderFull
      tags:
        - Work Order
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/uploadFiles":
    x-swagger-router-controller: workOrder
    post:
      description: Create a Full Work Order
      operationId: v1.createWorkOrderFiles
      tags:
        - Work Order
      consumes:
        - multipart/form-data
      parameters:
         - in: formData
           name: file
           description: image file to be uploaded
           type: file
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/get-file-events":
    x-swagger-router-controller: workOrder
    get:
      description: Work Order File Upload Events
      operationId: v1.getWorkOrderFileEvents
      tags:
        - Work Order
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/file-events":
    x-swagger-router-controller: workOrder
    post:
      description: Work Order File Upload Events
      operationId: v1.createWorkOrderFileEvents
      tags:
        - Work Order
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update Work Order File Upload Events
      operationId: v1.updateWorkOrderFileEvents
      tags:
        - Work Order
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/file-events-scan/update-work-order-id":
    x-swagger-router-controller: workOrder
    put:
      description: Work Order File Upload Scan
      operationId: v1.updateWorkOrderFileName
      tags:
        - Work Order
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/file-events-scan":
    x-swagger-router-controller: workOrder
    post:
      description: Work Order File Upload Scan
      operationId: v1.createWorkOrderFileScan
      tags:
        - Work Order
      parameters:
      - name: payload
        in: body
        required: true
        schema:
          $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/file-events/notifications":
      x-swagger-router-controller: workOrder
      post:
        description: Work Order File Upload Events Notifications
        operationId: v1.sendWorkOrderFileEventsNotifications
        tags:
          - Work Order
        parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
        responses:
          "200":
            description: Success
            schema:
              $ref: "#/definitions/HelloWorldResponse"
          default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/samsara-users":
    x-swagger-router-controller: workOrder
    get:
      description: List Work Orders
      operationId: v1.getWorkOrderSamsaraUsers
      tags:
        - Work Order
      parameters:
        - name: shopId
          type: string
          in: query
          required: false
          description: shopId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/search":
    x-swagger-router-controller: workOrder
    get:
      description: List Work Orders
      operationId: v1.searchWorkOrders
      tags:
        - Work Order
      parameters:
        - name: id_shop
          type: string
          in: query
          required: false
          description: id_shop
        - name: statusIn
          type: string
          in: query
          required: false
          description: statusIn
        - name: carIds
          type: string
          in: query
          required: false
          description: carIds
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/img-ocr":
    x-swagger-router-controller: workOrder
    post:
      description: Extract info from a Work Order image
      operationId: v1.imageOcr
      tags:
        - Work Order
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order-dvir/search":
    x-swagger-router-controller: workOrder
    get:
      description: List Work Orders Dvir
      operationId: v1.searchWorkOrdersDvir
      tags:
        - Work Order
      parameters:
        - name: dvirId
          type: number
          in: query
          required: false
          description: dvir_id
        - name: workOrderId
          type: number
          in: query
          required: false
          description: work_order_id
        - name: defectId
          type: number
          in: query
          required: false
          description: defect_id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/unit-ids":
    x-swagger-router-controller: workOrder
    get:
      description: Get Unit Ids for given Car Ids
      operationId: v1.getUnitIdsFromCarIds
      tags:
        - Unit Ids of Vehicles
      parameters:
        - name: car_ids
          in: query
          description: list of car ids
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/visits-frequency/{id_shop}":
    x-swagger-router-controller: workOrder
    get:
      description: Get top 20 visit frequency vehicles
      operationId: v1.getShopTopVehicleVisits
      tags:
        - Shop Vehicle Visit Frequency
      parameters:
        - name: id_shop
          in: path
          description: id of the shop
          required: true
          type: integer
        - name: days_back
          in: query
          description: number of days back to look for results
          required: false
          type: integer
        - name: limit
          in: query
          description: limit on number of results returned
          required: false
          type: integer
        - name: type
          in: query
          description: number of days back to look for results
          required: true
          type: string
        - name: status
          in: query
          description: status
          required: false
          type: string
        - name: vendor
          in: query
          description: vendor
          required: false
          type: string
        - name: make
          in: query
          description: make
          required: false
          type: string
        - name: model
          in: query
          description: model
          required: false
          type: string
        - name: year
          in: query
          description: year
          required: false
          type: string
        - name: carIds
          in: query
          description: carIds
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/parts-frequency/{id_shop}":
    x-swagger-router-controller: workOrder
    get:
      description: Get top 20 Parts based on frequency, cost, or avg cost per visit
      operationId: v1.getShopTopPartWidgets
      tags:
        - Shop Part Widget Data
      parameters:
        - name: id_shop
          in: path
          description: id of the shop
          required: true
          type: integer
        - name: days_back
          in: query
          description: number of days back to look for results
          required: false
          type: integer
        - name: limit
          in: query
          description: limit on number of results returned
          required: false
          type: integer
        - name: type
          in: query
          description: number of days back to look for results
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/statuses-by-shop-id":
    x-swagger-router-controller: workOrder
    get:
      description: Get Work Order Statuses for a given shop
      operationId: v1.getWorkOrderStatusesByShopId
      tags:
        - Work Order
      parameters:
        - name: shopId
          type: integer
          in: query
          required: true
          description: the shop id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Create/Update Work Order Statuses for a given shop
      operationId: v1.createUpdateWorkOrderStatusesByShopId
      tags:
        - Work Order
      parameters:
        - name: shopId
          type: integer
          in: query
          required: true
          description: the shop id
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/{id_work_order}":
    x-swagger-router-controller: workOrder
    get:
      description: Get Work Order
      operationId: v1.getWorkOrder
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: workOrderId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update Work Order
      operationId: v1.updateWorkOrder
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: workOrderId
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete Work Order
      operationId: v1.deleteWorkOrder
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: workOrderId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/fleet/{id_shop}/group-by-status-and-count":
    x-swagger-router-controller: workOrder
    get:
      description: Group Work Orders by status and assignedTo and count
      operationId: v1.groupByStatusAndCount
      tags:
        - Work Order
      parameters:
        - name: id_shop
          type: integer
          in: path
          required: true
          description: id_shop
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/{id_work_order}/work-order-line":
    x-swagger-router-controller: workOrder
    post:
      description: Create or Update Work Order Line
      operationId: v1.createUpdateWorkOrderLine
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: id_work_order
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update Work Order Line
      operationId: v1.updateWorkOrderLine
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: id_work_order
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/work-order/{id_work_order}/pdf":
    x-swagger-router-controller: workOrder
    get:
      description: Create a PDF with the work order to be downloaded or printed
      operationId: v1.createWorkOrderPdf
      tags:
        - Work Order
      parameters:
        - name: id_work_order
          type: integer
          in: path
          required: true
          description: id_work_order
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/purchase-order":
    x-swagger-router-controller: purchaseOrder
    post:
      description: Create a Purchase Order
      operationId: v1.createPurchaseOrder
      tags:
        - Purchase Order
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: List Purchase Orders
      operationId: v1.listPurchaseOrder
      tags:
        - Purchase Order
      parameters:
        - name: id_shop
          type: integer
          in: query
          required: true
          description: id_shop
        - name: sort
          type: string
          in: query
          required: false
          description: sorting key
        - name: search
          type: string
          in: query
          required: false
          description: search string
        - name: status
          type: string
          in: query
          required: false
          description: purchase order status
        - name: assignedTo
          type: string
          in: query
          required: false
          description: assigned to
        - name: limit
          type: number
          in: query
          required: false
          description: query limit
        - name: offset
          type: number
          in: query
          required: false
          description: query offset
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/purchase-order/{id_purchase_order}":
    x-swagger-router-controller: purchaseOrder
    get:
      description: Get Purchase Order
      operationId: v1.getPurchaseOrder
      tags:
        - Purchase Order
      parameters:
        - name: id_purchase_order
          type: string
          in: path
          required: true
          description: id_purchase_order
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update Purchase Order
      operationId: v1.updatePurchaseOrder
      tags:
        - Purchase Order
      parameters:
        - name: id_purchase_order
          type: integer
          in: path
          required: true
          description: id_purchase_order
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete Purchase Order
      operationId: v1.deletePurchaseOrder
      tags:
        - Purchase Order
      parameters:
        - name: id_purchase_order
          type: integer
          in: path
          required: true
          description: id_purchase_order
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/contact":
    x-swagger-router-controller: contact
    post:
      description: Create a Contact
      operationId: v1.createShopContact
      tags:
        - Contact
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: List Shop Contacts
      operationId: v1.listShopContacts
      tags:
        - Contact
      parameters:
        - name: shopId
          type: integer
          in: query
          required: true
          description: shopId
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/contact/{contactId}":
    x-swagger-router-controller: contact
    get:
      description: Get Contact
      operationId: v1.getContact
      tags:
        - Contact
      parameters:
        - name: contactId
          type: string
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: Update Contact
      operationId: v1.updateContact
      tags:
        - Contact
      parameters:
        - name: contactId
          type: string
          in: path
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/labor-technician":
    x-swagger-router-controller: laborTechnician
    post:
      description: Create a Labor Technician
      operationId: v1.createLaborTechnician
      tags:
        - Labor Technician
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: List Technicians
      operationId: v1.getAllLaborTechnician
      tags:
        - Labor Technician
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/labor-technician/search":
    x-swagger-router-controller: laborTechnician
    get:
      description: List Technicians
      operationId: v1.searchLaborTechnician
      tags:
        - Labor Technician
      parameters:
        - name: username
          type: string
          in: query
          required: false
          description: username
        - name: source
          type: string
          in: query
          required: false
          description: source
        - name: id
          type: number
          in: query
          required: false
          description: id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/labor-technician/{technicianId}":
    x-swagger-router-controller: laborTechnician
    get:
      description: List one Technician
      operationId: v1.getLaborTechnician
      tags:
        - Labor Technician by Id
      parameters:
        - name: technicianId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vehicle-part":
    x-swagger-router-controller: vehiclePart
    post:
      description: Create a Vehicle Part
      operationId: v1.createVehiclePart
      tags:
        - Vehicle Part
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    get:
      description: List Vehicle Parts
      operationId: v1.listVehiclePart
      tags:
        - Vehicle Part
      parameters:
        - name: id_shop
          type: integer
          in: query
          required: true
          description: id_shop
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vehicle-part/search":
    x-swagger-router-controller: vehiclePart
    get:
      description: Search Vehicle Parts
      operationId: v1.searchVehiclePart
      tags:
        - Vehicle Part
      parameters:
        - name: shopIds
          type: string
          in: query
          required: false
          description: shopIds comma separated
        - name: search
          type: string
          in: query
          required: false
          description: search
        - name: include_deleted
          type: boolean
          in: query
          required: false
          description: include deleted records
        - name: componentCode
          type: string
          in: query
          required: false
          description: search by compnent code
        - name: source
          type: string
          in: query
          required: false
          description: source migration
        - name: id
          type: number
          in: query
          required: false
          description: part id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vehicle-part/report":
    x-swagger-router-controller: vehiclePart
    get:
      description: Get report for shop parts
      operationId: v1.getReportForShopParts
      tags:
        - Vehicle Part
      parameters:
        - name: shopIds
          type: string
          in: query
          required: false
          description: shopIds comma separated
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vehicle-part/{partId}":
    x-swagger-router-controller: vehiclePart
    patch:
      description: Update Vehicle Part
      operationId: v1.updateVehiclePart
      tags:
        - Vehicle Part
      parameters:
        - name: partId
          type: number
          in: path
          required: true
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete Vehicle Part
      operationId: v1.deleteVehiclePart
      tags:
        - Vehicle Part
      parameters:
        - name: partId
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/tmt":
    x-swagger-router-controller: tmt
    post:
      description: Create new TMT Work Order
      operationId: v1.createTMTworkOrder
      tags:
        - TMT
      parameters:
        - name: payload
          in: body
          required: true
          description: New Work Order properties
          schema:
            properties:
              data:
                type: object
                description: TMT Work Order data
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/work-order-tmt":
    x-swagger-router-controller: tmt
    post:
      description: Create a TMT Work Order and update Pitstop
      operationId: v1.createTMTPitStopWorkOrder
      tags:
        - TMT
      parameters:
        - name: payload
          in: body
          required: true
          description: New Work Order properties
          schema:
            properties:
              data:
                type: object
                description: TMT PitStop Work Order data
      responses:
        "201":
          description: "Created"
          schema:
            properties:
              response:
                $ref: "#/definitions/Car"
              meta:
                $ref: "#/definitions/responseMeta"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/response400"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/response401"
        "404":
          description: "Not found"
          schema:
            $ref: "#/definitions/response404"
        "500":
          description: "Internal service error"
          schema:
            $ref: "#/definitions/response500"
  "/v1/car-work-order-shop/search":
    x-swagger-router-controller: workOrder
    get:
      description: List Car-Repair Shop from customers Work Orders
      operationId: v1.searchCarWorkOrdersShop
      tags:
        - Work Order
      parameters:
        - name: id
          type: number
          in: query
          required: false
          description: table id
        - name: unitId
          type: number
          in: query
          required: false
          description: customer unit id
        - name: repairShop
          type: string
          in: query
          required: false
          description: customer shop
        - name: pitstopCarId
          type: number
          in: query
          required: false
          description: pitstop Car Id
        - name: pitstopShopId
          type: number
          in: query
          required: false
          description: pitstop Shop Id
        - name: pitstopCarName
          type: string
          in: query
          required: false
          description: pitstop Car name
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vmrs":
    x-swagger-router-controller: workOrder
    get:
      description: List VMRS from our database by a given search criteria
      operationId: v1.searchVmrs
      tags:
        - Work Order
      parameters:
        - name: search
          type: string
          in: query
          required: false
          description: search string code or description
        - name: limit
          type: number
          in: query
          required: false
          description: query limit
        - name: offset
          type: number
          in: query
          required: false
          description: query offset
        - name: type
          type: string
          in: query
          required: false
          description: type of search
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vmrs/asm-code":
    x-swagger-router-controller: workOrder
    get:
      description: List VMRS ASMs for a given system code
      operationId: v1.getVmrsAsmsForSysCode
      tags:
        - Work Order
      parameters:
        - name: vmrsKeyId
          type: number
          in: query
          required: true
          description: vmrs system code id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/vmrs/{id}":
    x-swagger-router-controller: workOrder
    get:
      description: Get VMRS by id
      operationId: v1.getVmrsById
      tags:
        - Work Order
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: vmrs id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/component-code/search":
    x-swagger-router-controller: workOrder
    get:
      description: List Component Code from TMT customers Work Orders
      operationId: v1.searchComponentCode
      tags:
        - Work Order
      parameters:
        - name: id
          type: number
          in: query
          required: false
          description: table id
        - name: defect
          type: string
          in: query
          required: false
          description: dvir defect
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/complaint-code":
    x-swagger-router-controller: workOrder
    get:
      description: List Complaint from TMT customers Work Orders
      operationId: v1.getComplaintCode
      tags:
        - Work Order
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/repair-code":
    x-swagger-router-controller: workOrder
    get:
      description: List Repair Code from TMT customers Work Orders
      operationId: v1.getRepairCode
      tags:
        - Work Order
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/motive-oauth":
    x-swagger-router-controller: motiveOauth
    post:
      description: Generates an OAuth 2.0 access token and refresh token and stores it in AWS Secrets Manager
      operationId: v1.createOauthTokens
      tags:
        - Motive Oauth
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              code:
                type: string
                description: Motive OAuth initial authorization code
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/odometer-snapshot":
    x-swagger-router-controller: odometerSnapshot
    get:
      description: Get odometer snapshot in range
      operationId: v1.getShopOdometerSnapshotInRange
      tags:
        - Get Odometer Snapshot in Range
      parameters:
        - name: shopId
          type: integer
          in: query
          required: true
          description: shopId
        - name: monthFrom
          type: string
          in: query
          required: true
          description: monthFrom
        - name: monthTo
          type: string
          in: query
          required: true
          description: monthTo
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/pm-schedule-summaries":
    x-swagger-router-controller: issue
    get:
      description: Get a list of pm schedule summaries
      operationId: v1.getPMScheduleSummary
      tags:
        - Service
      parameters:
        - name: carIds
          type: string
          in: query
          required: true
          description: a list of comma-separated integers
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/dvirs/latest":
    x-swagger-router-controller: dvir
    get:
      description: Get the latest dvir record by car ids
      operationId: v1.getLatestDvirs
      tags:
        - DVIR
      parameters:
        - name: carIds
          type: string
          in: query
          required: true
          description: a list of comma-separated integers
        - name: trailers
          type: boolean
          in: query
          required: false
          description: bool flag true for trailers
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/dvirs-detail/{id}":
    x-swagger-router-controller: dvir
    get:
      description: Get computed DVIR record by id
      operationId: v1.getDvirById
      tags:
        - DVIR
      parameters:
        - name: id
          type: string
          in: path
          required: true
          description: dvir id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/dvirs/shop":
    x-swagger-router-controller: dvir
    get:
      description: Get the latest dvir record for all assets by shop id
      operationId: v1.getLatestDvirsFromShop
      tags:
        - DVIR
      parameters:
        - name: shopId
          type: number
          in: query
          required: true
          description: an shop identification integer
        - name: trailers
          type: boolean
          in: query
          required: false
          description: bool flag true for trailers
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/dvirs/counts":
    x-swagger-router-controller: dvir
    get:
      description: Get the  dvir count record for all assets by shop id
      operationId: v1.dvirCountsByShop
      tags:
        - DVIR
      parameters:
        - name: shopId
          type: number
          in: query
          required: true
          description: an shop identification integer
        - name: trailers
          type: boolean
          in: query
          required: false
          description: bool flag true for trailers
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/warranties":
    x-swagger-router-controller: warranty
    get:
      description: Get the warranties based on a given filter
      operationId: v1.getWarranties
      tags:
        - Warranty
      parameters:
        - name: shopId
          type: number
          in: query
          required: false
          description: an shop identification integer
        - name: carIds
          type: string
          in: query
          required: false
          description: comma separated list of car ids
        - name: search
          type: string
          in: query
          required: false
          description: search string
        - name: statuses
          type: string
          in: query
          required: false
          description: comma separated list of statuses
        - name: sortBy
          type: string
          in: query
          required: false
          description: sorting key
        - name: limit
          type: number
          in: query
          required: false
          description: query limit
        - name: offset
          type: number
          in: query
          required: false
          description: query offset
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: Create a warranty
      operationId: v1.createWarranty
      tags:
        - Warranty
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/warranties/bulk":
    x-swagger-router-controller: warranty
    post:
      description: Create multiple warranties
      operationId: v1.bulkCreateWarranties
      tags:
        - Warranty
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: Delete multiple warranties
      operationId: v1.bulkDeleteWarranties
      tags:
        - Warranty
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/warranties/{id}":
    x-swagger-router-controller: warranty
    get:
      description: Get a warranty by id
      operationId: v1.getWarranty
      tags:
        - Warranty
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: warranty id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: Update a warranty by id
      operationId: v1.updateWarranty
      tags:
        - Warranty
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: warranty id
        - name: payload
          in: body
          required: true
          schema:
            $ref: "#/definitions/AnyValue"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  "/v1/warranties/{id}/components":
    x-swagger-router-controller: warranty
    get:
      description: Get warranty components by warranty id
      operationId: v1.getWarrantyComponents
      tags:
        - Warranty
      parameters:
        - name: id
          type: number
          in: path
          required: true
          description: warranty id
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
#securityDefinitions:
#  jwt:
#    type: oauth2
#    authorizationUrl: /login
#    flow: implicit
#    scopes:
#      all: all scopes
definitions:
  AnyValue:
    description: "Any value"
  MessageObject:
    required:
      - type
    properties:
      type:
        type: string
        description: "Type of message: notification, chat, email, etc."
      name:
        type: string
        description: "Name of Campaign"
      desc:
        type: string
        description: "Desc of Campaign"
      intent:
        type: string
        description: "Intent of Campaign (scan_car, book_appointment, etc.)"
      payload:
        type: object
        description: "Content payload to be delivered to recepient(s)"
        properties:
          template:
            type: string
          title:
            type: string
          content:
            type: object
          data:
            type: object
  SmoochJWTResponse:
    properties:
      smoochToken:
        type: string
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      error:
        type: string
      message:
        type: string
  GetCarAppointmentSuccessfulSchema:
    required:
      - results
    properties:
      results:
        type: array
        items:
          type: object
          properties:
            state:
              type: string
            isNotified:
              type: boolean
            comments:
              type: string
            shopId:
              type: number
            appointmentDate:
              type: string
            appointmentTimeStampUTC:
              type: number
            createdAt:
              type: string
            updatedAt:
              type: string
  GetShopAppointmentSuccessfulSchema:
    required:
      - results
    properties:
      results:
        type: array
        items:
          type: object
          properties:
            state:
              type: string
            isNotified:
              type: boolean
            comments:
              type: string
            carId:
              type: number
            appointmentDate:
              type: string
            appointmentTimeStampUTC:
              type: number
            createdAt:
              type: string
            updatedAt:
              type: string
  GeoPoint:
    description: Geo-location point consists of altitude, latitude and longitude
    properties:
      altitude:
        description: altitude
        type: number
      latitude:
        description: latitude
        type: number
      longitude:
        description: longitude
        type: number
  Trip:
    description: Trip object
    properties:
      _id:
        description: Internal id of trip
        type: number
      tripId:
        description: Trip identifier given by mobile device. Trip id is 4 bytes integer.
        type: string
      locationStart:
        $ref: "#/definitions/GeoPoint"
      locationEnd:
        $ref: "#/definitions/GeoPoint"
      mileageStart:
        description: Mileage at the start of the trip
        type: number
      mileageAccum:
        description: Mileage accumulated during trip
        type: number
      fuelConsumptionAccum:
        description: Fuel consumption accumulated during trip
        type: number
      fuelConsumptionStart:
        description: Fuel consumption as start of trip
        type: number
      timeStart:
        description: Trip start time
        type: string
      timeEnd:
        description: Trip end time
        type: string
      vin:
        description: VIN of car which performed the trip
        type: string
  CarsDriverObject:
    description: Cars Driver Object
    properties:
      id:
        description: User ID
        type: integer
      firstName:
        description: First Name
        type: string
      lastName:
        description: Last Name
        type: string
  CarsLocationObject:
    description: Cars Location Object
    properties:
      timestamp:
        description: Timestamp of the location
        type: string
      latitude:
        description: latitude
        type: number
      longitude:
        description: longitude
        type: number
  CarsLocationDriverObject:
    description: Cars Object for getting live locations
    properties:
      id:
        description: Internal id of car
        type: integer
      vin:
        description: Vehicle Identification Number
        type: string
      year:
        description: Year of manufacturing
        type: integer
      make:
        description: Make
        type: string
      model:
        description: Model
        type: string
      carName:
        description: Car Name
        type: string
      driver:
        $ref: "#/definitions/CarsDriverObject"
      location:
        $ref: "#/definitions/CarsLocationObject"
  Car:
    description: Car object
    properties:
      _id:
        description: Internal id of car
        type: number
      vin:
        description: Vehicle Identification Number
        type: string
      licensePlate:
        description: Vehicle license plate
        type: string
      baseMileage:
        description: Mileage when car was first created
        type: number
      serviceMileage:
        description: Service mileage
        type: number
      totalMileage:
        description: Current total mileage
        type: number
      year:
        description: Year of manufacturing
        type: number
      make:
        description: Make
        type: string
      model:
        description: Model
        type: string
      trim:
        description: Trim / submodel
        type: string
      tankSize:
        description: Fuel tank size
        type: string
      engine:
        description: Engine description
        type: string
      cityMileage:
        description: City fuel consumption
        type: string
      highwayMileage:
        description: Highway fuel consumption
        type: string
      userId:
        description: User identifier of car's owner, null car has no owner
        type: number
      meta:
        description: Additional information about the car
        type: object
      salesperson:
        description: Name of salesperson that sold the car
        type: string
      lastConnectionTimestamp:
        description: UNIX Timestamp of the last signal received from the device connected to the car
        type: integer
      images:
        description: car images of different size
        type: object
      acesMapping:
        description: Aces mapping data for a car
        type: object
  # SensorDataObject:
  #   type: array
  #   items:
  #     type: object
  #     properties:
  #       id:
  #         description: Sensor data identifier which usually is the same as the column name in the big-table, e.g., pid type/name, alarm name, gps coordinate type such as logitude, or the name of anything that needs to be stored in db
  #         type: string
  #         # isRequired: true
  #       data:
  #         description: The data value associated with the key name
  #         type: string
  #         # isRequired: true
  #       meta:
  #         description: Additional information about the data in this object is passed when creating new data objects. It contains information that the server will use to process the data prior to storing it and it is not stored. Thus it will not be returned in a GET request.
  #         type: object
  #         # isRequired: false
  Mapping:
    description: RTC - UTC mapping
    properties:
      _id:
        description: Internal id of mapping in device_clock_sync table
        type: number
      vin:
        description: Vehicle Identification Number
        type: string
      deviceType:
        description: Device type
        type: string
      deviceId:
        description: Device Id
        type: string
      rtcTime:
        description: rtc time of device
        type: number
      utcTime:
        description: utc time
        type: string
  CarShop:
    description: Car-shop relation object
    properties:
      _id:
        description: Relation identifier
        type: number
      shopId:
        description: Shop identifier
        type: number
      carId:
        description: Car identifier
        type: number
  Campaign:
    description: Campaign object
    properties:
      _id:
        description: Internal id of campaign
        type: number
      name:
        description: Campaign name
        type: string
      description:
        description: Campaign description
        type: string
      type:
        description: Campaign type
        type: string
      idOwner:
        description: Owner id number
        type: number
      shopId:
        description: Shop Id associated with the message
        type: number
      launchedAt:
        description: Launch date and time
        type: string
      isActive:
        description: Is campaign active
        type: string
  User:
    description: User object
    properties:
      _id:
        description: Internal id of user
        type: number
      facebookId:
        description: Facebook ID
        type: string
      firstName:
        description: First name
        type: string
      lastName:
        description: Last name
        type: string
      activated:
        description: Is user activated
        type: boolean
      role:
        description: Role
        type: string
      username:
        description: username
        type: string
      phone:
        description: Phone number
        type: number
      email:
        description: Email
        type: string
  Report:
    description: Report object
    properties:
      _id:
        description: Relation identifier
        type: number
      id:
        description: Relation identifier, same as _id but convention is to use _id not this one
        type: number
      carId:
        description: Car identifier
        type: number
      vin:
        description: Car vehicle identification number
        type: string
      reportType:
        description: Report Type
        type: string
      content:
        description: Content of the report
        type: object
      isInternal:
        description: indicates whether the the report should be visible to the end user
        type: boolean
      meta:
        description: meta information about said report; for internal use only
        type: object
      createdAt:
        description: timestamp of when the report was generated
        type: string
  UserSetting:
    description: User settings object
    properties:
      userId:
        description: Unique user identifier
        type: number
      settings:
        description: Settings object containing all of the users settings
        type: object
  #  filteredObj:
  #    type: object
  #    properties:
  #      id:
  #        type: string
  #      value:
  #        type: string
  responseMeta:
    description: Meta information associated with the response object
    properties:
      requestId:
        description: Request identifier provided by client or if missing automatically generated on backend
        type: string
      pagination_token:
        description: UUID token that can be used in following requests to page through results
        type: string
  responseReport:
    description: Schema for the report object
    properties:
      date:
        description: date
        type: string
      score:
        description: score
        type: number
        multipleOf: 0.01
      status:
        description: status
        type: string
      variant:
        description: variant
        type: string
      testName:
        description: testName
        type: string
  IssueData:
    properties:
      id:
        type: number
      source:
        type: string
        description: one of (dataone, algorithm, preset, user, dtc, recall, archive)
      priority:
        type: number
        description: one of (0, 1, 2, 3, 4)
      status:
        type: string
        description: one of (upcoming, new, pending, done)
      name:
        type: string
      description:
        type: string
      pendingDtc:
        type: boolean
        description: visible only if source is dtc
      car:
        type: object
        properties:
          id:
            type: number
          vin:
            type: string
          name:
            type: string
            description: carName
      dueDate:
        type: string
        description: ISO 8601 string, e.g. "2019-03-05T20:43:56.963Z"
      suggestedAction:
        type: string
        description: Our suggested action for a user to take basedon this issue
      engineDeratePossible:
        type: boolean
        description: Whether the issue can cause the engine to lose power
      finishRoute:
        type: boolean
        description: Whether the issue is severe enough that the driver should not finish their current route
      adjPriority:
        type: number
        description: Issue priority adjusted according to Data Science criteria
      dueMileage:
        type: number
        description: rounded off to 3 decimal places
      reportDate:
        type: string
        description: ISO 8601 string, e.g. "2019-03-05T20:43:56.963Z"
      reportMileage:
        type: number
        description: rounded off to 3 decimal places
      doneDate:
        type: string
        description: ISO 8601 string, e.g. "2019-03-05T20:43:56.963Z"
      serviceHistory:
        type: object
        properties:
          id:
            type: number
          priority:
            type: number
          mileage:
            type: number
          done_at:
            type: string
          status:
            type: string
          created_at:
            type: string
      #      cost:
      #        type: number
      #        description: Estimated cost of the service
      componentCategory:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            priority:
              type: number
      genericCategory:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            priority:
              type: number
  IntegrationRecord:
    properties:
      accountId:
        type: string
      alias:
        type: string
      type:
        type: string
        description: "e.g. geotab"
      lastSync:
        $ref: "#/definitions/IntegrationRecordDetails"
      history:
        type: array
        items:
          $ref: "#/definitions/IntegrationRecordDetails"
  IntegrationRecordDetails:
    properties:
      isStatusOk:
        type: boolean
      timestamp:
        type: string
        description: ISO 8601 timestamp
      statusDetail:
        type: array
        items:
          type: object
          properties:
            status:
              type: string
              description: one of "ok", "pending", "fail"
            count:
              type: number
  errorMeta:
    description: Meta information associated with the response object
    properties:
      requestId:
        description: Request identifier provided by client or if missing automatically generated on backend
        type: string
      hint:
        description: Parameter added to indicated if something could be incorrect or strange about the request and provide a helpful hint
        type: string
  responseError:
    description: Error response object
    properties:
      error:
        description: Error identifier
        type: string
      message:
        description: Error message
        type: string
  response400:
    description: Bad request
    properties:
      response:
        $ref: "#/definitions/responseError"
      meta:
        $ref: "#/definitions/errorMeta"
  response401:
    description: Unauthorized
    properties:
      response:
        $ref: "#/definitions/responseError"
      meta:
        $ref: "#/definitions/errorMeta"
  response403:
    description: Invalid access
    properties:
      response:
        $ref: "#/definitions/responseError"
      meta:
        $ref: "#/definitions/errorMeta"
  response404:
    description: Not found
    properties:
      response:
        $ref: "#/definitions/responseError"
      meta:
        $ref: "#/definitions/errorMeta"
  #  response409:
  #    description: Conflict(s)
  #    properties:
  #      response:
  #        description: List of conflics with existing objects
  #        type: array
  #        items:
  #          type: object
  #          properties:
  #            existing:
  #              description: The existing object that the request is in conflict with
  #              type: object
  #            diff:
  #              description: An object consisting of the confliced properties in the request
  #              type: object
  #      meta:
  #        $ref: "#/definitions/errorMeta"
  response500:
    description: Internal service error
    properties:
      response:
        $ref: "#/definitions/responseError"
      meta:
        $ref: "#/definitions/errorMeta"